(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react-redux"), require("prop-types"));
	else if(typeof define === 'function' && define.amd)
		define(["react-redux", "prop-types"], factory);
	else if(typeof exports === 'object')
		exports["resource-hoc"] = factory(require("react-redux"), require("prop-types"));
	else
		root["resource-hoc"] = factory(root["react-redux"], root["prop-types"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_8__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resourceProps = exports.resource = undefined;\n\nvar _resource = __webpack_require__(2);\n\nvar _resource2 = _interopRequireDefault(_resource);\n\nvar _resourceProps = __webpack_require__(7);\n\nvar _resourceProps2 = _interopRequireDefault(_resourceProps);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.resource = _resource2.default;\nexports.resourceProps = _resourceProps2.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvaW5kZXguanM/MWZkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVzb3VyY2UgICAgICBmcm9tICcuL3Jlc291cmNlJ1xuaW1wb3J0IHJlc291cmNlUHJvcHMgZnJvbSAnLi9yZXNvdXJjZVByb3BzJ1xuXG5leHBvcnQge1xuICByZXNvdXJjZSxcbiAgcmVzb3VyY2VQcm9wc1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9pbmRleC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7Ozs7O0FBRUE7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(0);
module.exports = __webpack_require__(0);


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _resource = __webpack_require__(3);\n\nvar _resource2 = _interopRequireDefault(_resource);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _resource2.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvcmVzb3VyY2UvaW5kZXguanM/MzhkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVzb3VyY2UgZnJvbSAnLi9yZXNvdXJjZSdcblxuZXhwb3J0IGRlZmF1bHQgcmVzb3VyY2VcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvcmVzb3VyY2UvaW5kZXguanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7Ozs7O0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _reactRedux = __webpack_require__(4);\n\nvar _reduxRails = __webpack_require__(5);\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar getScopedActions = function getScopedActions(dispatchProps, controller) {\n  var baseScoping = {\n    resource: controller,\n    controller: controller\n  };\n\n  var update = function update(id, attributes) {\n    return dispatchProps.update(_extends({}, baseScoping, {\n      id: id\n    }));\n  };\n\n  var create = function create(attributes) {\n    return dispatchProps.update(_extends({}, baseScoping, {\n      attributes: attributes\n    }));\n  };\n\n  var destroy = function destroy(id) {\n    return dispatchProps.update(_extends({}, baseScoping, {\n      id: id\n    }));\n  };\n\n  var fetch = function fetch(type) {\n    return function (queryParams) {\n      return dispatchProps[type](_extends({}, baseScoping, {\n        queryParams: queryParams\n      }));\n    };\n  };\n\n  return {\n    index: fetch('index'),\n    show: fetch('show'),\n    create: create,\n    update: update,\n    destroy: destroy\n  };\n};\n\nvar resource = function resource(resourceName, resourceOptions) {\n  var mapStateToProps = function mapStateToProps(state) {\n    var resourceData = state.resources[resourceName];\n    if (!resourceData) {\n      throw new Error(resourceName + ' is not registered in rails-redux resource config');\n    }\n\n    return resourceData;\n  };\n\n  var mapDispatchToProps = _reduxRails.railsActions;\n\n  var mergeProps = function mergeProps(stateProps, dispatchProps, ownProps) {\n    return _extends(_defineProperty({}, resourceName, _extends({}, getScopedActions(dispatchProps, resourceName), stateProps)), ownProps);\n  };\n\n  return function (WrappedComponent) {\n    return (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(WrappedComponent);\n  };\n};\n\nexports.default = resource;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvcmVzb3VyY2UvcmVzb3VyY2UuanM/NWQ0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25uZWN0IH0gICAgICBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IHJhaWxzQWN0aW9ucyB9IGZyb20gJ3JlZHV4LXJhaWxzJ1xuXG5jb25zdCBnZXRTY29wZWRBY3Rpb25zID0gKGRpc3BhdGNoUHJvcHMsIGNvbnRyb2xsZXIpID0+IHtcbiAgY29uc3QgYmFzZVNjb3BpbmcgPSB7XG4gICAgcmVzb3VyY2U6IGNvbnRyb2xsZXIsXG4gICAgY29udHJvbGxlclxuICB9XG5cbiAgY29uc3QgdXBkYXRlID0gKGlkLCBhdHRyaWJ1dGVzKSA9PiAoXG4gICAgZGlzcGF0Y2hQcm9wcy51cGRhdGUoe1xuICAgICAgLi4uYmFzZVNjb3BpbmcsXG4gICAgICBpZFxuICAgIH0pXG4gIClcblxuICBjb25zdCBjcmVhdGUgPSBhdHRyaWJ1dGVzID0+IChcbiAgICBkaXNwYXRjaFByb3BzLnVwZGF0ZSh7XG4gICAgICAuLi5iYXNlU2NvcGluZyxcbiAgICAgIGF0dHJpYnV0ZXNcbiAgICB9KVxuICApXG5cbiAgY29uc3QgZGVzdHJveSA9IGlkID0+IChcbiAgICBkaXNwYXRjaFByb3BzLnVwZGF0ZSh7XG4gICAgICAuLi5iYXNlU2NvcGluZyxcbiAgICAgIGlkXG4gICAgfSlcbiAgKVxuXG4gIGNvbnN0IGZldGNoID0gdHlwZSA9PiBxdWVyeVBhcmFtcyA9PiAoXG4gICAgZGlzcGF0Y2hQcm9wc1t0eXBlXSh7XG4gICAgICAuLi5iYXNlU2NvcGluZyxcbiAgICAgIHF1ZXJ5UGFyYW1zXG4gICAgfSlcbiAgKVxuXG4gIHJldHVybiB7XG4gICAgaW5kZXg6IGZldGNoKCdpbmRleCcpLFxuICAgIHNob3c6IGZldGNoKCdzaG93JyksXG4gICAgY3JlYXRlLFxuICAgIHVwZGF0ZSxcbiAgICBkZXN0cm95XG4gIH1cbn1cblxuY29uc3QgcmVzb3VyY2UgPSAocmVzb3VyY2VOYW1lLCByZXNvdXJjZU9wdGlvbnMpID0+IHtcbiAgY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiB7XG4gICAgY29uc3QgcmVzb3VyY2VEYXRhID0gc3RhdGUucmVzb3VyY2VzW3Jlc291cmNlTmFtZV1cbiAgICBpZiAoIXJlc291cmNlRGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3Jlc291cmNlTmFtZX0gaXMgbm90IHJlZ2lzdGVyZWQgaW4gcmFpbHMtcmVkdXggcmVzb3VyY2UgY29uZmlnYClcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzb3VyY2VEYXRhXG4gIH1cblxuICBjb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSByYWlsc0FjdGlvbnNcblxuICBjb25zdCBtZXJnZVByb3BzID0gKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSA9PiAoe1xuICAgIFtyZXNvdXJjZU5hbWVdOiB7XG4gICAgICAuLi5nZXRTY29wZWRBY3Rpb25zKGRpc3BhdGNoUHJvcHMsIHJlc291cmNlTmFtZSksXG4gICAgICAuLi5zdGF0ZVByb3BzXG4gICAgfSxcbiAgICAuLi5vd25Qcm9wc1xuICB9KVxuXG5cbiAgcmV0dXJuIFdyYXBwZWRDb21wb25lbnQgPT4gKFxuICAgIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMpKFdyYXBwZWRDb21wb25lbnQpXG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb3VyY2VcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvcmVzb3VyY2UvcmVzb3VyY2UuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUFBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQUE7QUFHQTtBQUZBO0FBREE7QUFDQTtBQU1BO0FBQUE7QUFHQTtBQUZBO0FBREE7QUFDQTtBQU1BO0FBQUE7QUFHQTtBQUZBO0FBREE7QUFDQTtBQU1BO0FBQUE7QUFBQTtBQUdBO0FBRkE7QUFEQTtBQUFBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQVFBO0FBQUE7QUFBQTtBQUdBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_4__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcInJlYWN0LXJlZHV4XCI/Y2E2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfNF9fO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwicmVhY3QtcmVkdXhcIlxuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif (( false ? 'undefined' : _typeof(exports)) === 'object' && ( false ? 'undefined' : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') exports[\"Redux-Rails\"] = factory();else root[\"Redux-Rails\"] = factory();\n})(undefined, function () {\n\treturn (/******/function (modules) {\n\t\t\t// webpackBootstrap\n\t\t\t/******/ // The module cache\n\t\t\t/******/var installedModules = {};\n\n\t\t\t/******/ // The require function\n\t\t\t/******/function __webpack_require__(moduleId) {\n\n\t\t\t\t/******/ // Check if module is in cache\n\t\t\t\t/******/if (installedModules[moduleId])\n\t\t\t\t\t/******/return installedModules[moduleId].exports;\n\n\t\t\t\t/******/ // Create a new module (and put it into the cache)\n\t\t\t\t/******/var module = installedModules[moduleId] = {\n\t\t\t\t\t/******/i: moduleId,\n\t\t\t\t\t/******/l: false,\n\t\t\t\t\t/******/exports: {}\n\t\t\t\t\t/******/ };\n\n\t\t\t\t/******/ // Execute the module function\n\t\t\t\t/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t\t\t\t/******/ // Flag the module as loaded\n\t\t\t\t/******/module.l = true;\n\n\t\t\t\t/******/ // Return the exports of the module\n\t\t\t\t/******/return module.exports;\n\t\t\t\t/******/\n\t\t\t}\n\n\t\t\t/******/ // expose the modules object (__webpack_modules__)\n\t\t\t/******/__webpack_require__.m = modules;\n\n\t\t\t/******/ // expose the module cache\n\t\t\t/******/__webpack_require__.c = installedModules;\n\n\t\t\t/******/ // identity function for calling harmony imports with the correct context\n\t\t\t/******/__webpack_require__.i = function (value) {\n\t\t\t\treturn value;\n\t\t\t};\n\n\t\t\t/******/ // define getter function for harmony exports\n\t\t\t/******/__webpack_require__.d = function (exports, name, getter) {\n\t\t\t\t/******/if (!__webpack_require__.o(exports, name)) {\n\t\t\t\t\t/******/Object.defineProperty(exports, name, {\n\t\t\t\t\t\t/******/configurable: false,\n\t\t\t\t\t\t/******/enumerable: true,\n\t\t\t\t\t\t/******/get: getter\n\t\t\t\t\t\t/******/ });\n\t\t\t\t\t/******/\n\t\t\t\t}\n\t\t\t\t/******/\n\t\t\t};\n\n\t\t\t/******/ // getDefaultExport function for compatibility with non-harmony modules\n\t\t\t/******/__webpack_require__.n = function (module) {\n\t\t\t\t/******/var getter = module && module.__esModule ?\n\t\t\t\t/******/function getDefault() {\n\t\t\t\t\treturn module['default'];\n\t\t\t\t} :\n\t\t\t\t/******/function getModuleExports() {\n\t\t\t\t\treturn module;\n\t\t\t\t};\n\t\t\t\t/******/__webpack_require__.d(getter, 'a', getter);\n\t\t\t\t/******/return getter;\n\t\t\t\t/******/\n\t\t\t};\n\n\t\t\t/******/ // Object.prototype.hasOwnProperty.call\n\t\t\t/******/__webpack_require__.o = function (object, property) {\n\t\t\t\treturn Object.prototype.hasOwnProperty.call(object, property);\n\t\t\t};\n\n\t\t\t/******/ // __webpack_public_path__\n\t\t\t/******/__webpack_require__.p = \"\";\n\n\t\t\t/******/ // Load entry module and return exports\n\t\t\t/******/return __webpack_require__(__webpack_require__.s = 29);\n\t\t\t/******/\n\t\t}(\n\t\t/************************************************************************/\n\t\t/******/[\n\t\t/* 0 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.railsActions = exports.middleWare = exports.combineConfigs = exports.apiReducer = undefined;\\n\\nvar _middleWare = __webpack_require__(11);\\n\\nvar _middleWare2 = _interopRequireDefault(_middleWare);\\n\\nvar _apiReducer = __webpack_require__(9);\\n\\nvar _apiReducer2 = _interopRequireDefault(_apiReducer);\\n\\nvar _railsActions = __webpack_require__(12);\\n\\nvar _railsActions2 = _interopRequireDefault(_railsActions);\\n\\nvar _combineConfigs = __webpack_require__(10);\\n\\nvar _combineConfigs2 = _interopRequireDefault(_combineConfigs);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nexports.apiReducer = _apiReducer2.default;\\nexports.combineConfigs = _combineConfigs2.default;\\nexports.middleWare = _middleWare2.default;\\nexports.railsActions = _railsActions2.default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvaW5kZXguanM/MWZkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWlkZGxlV2FyZSAgICAgZnJvbSAnLi9taWRkbGVXYXJlJ1xuaW1wb3J0IGFwaVJlZHVjZXIgICAgIGZyb20gJy4vYXBpUmVkdWNlcidcbmltcG9ydCByYWlsc0FjdGlvbnMgICBmcm9tICcuL3JhaWxzQWN0aW9ucydcbmltcG9ydCBjb21iaW5lQ29uZmlncyBmcm9tICcuL2NvbWJpbmVDb25maWdzJ1xuXG5leHBvcnQge1xuICBhcGlSZWR1Y2VyLFxuICBjb21iaW5lQ29uZmlncyxcbiAgbWlkZGxlV2FyZSxcbiAgcmFpbHNBY3Rpb25zXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2luZGV4LmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7QUFFQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 1 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.determinOptimisticUpdateSetting = determinOptimisticUpdateSetting;\\nexports.determineResourceType = determineResourceType;\\nexports.getResourceNameSpace = getResourceNameSpace;\\nexports.getResourceIdAttribute = getResourceIdAttribute;\\nexports.getUniqueClientId = getUniqueClientId;\\nexports.isBool = isBool;\\nvar uniqueClientId = 0;\\n\\nfunction determinOptimisticUpdateSetting(_ref) {\\n  var resourceConfig = _ref.resourceConfig,\\n      config = _ref.config,\\n      _ref$defaultConfig = _ref.defaultConfig,\\n      defaultConfig = _ref$defaultConfig === undefined ? {} : _ref$defaultConfig;\\n\\n  if (isBool(resourceConfig.optimisticUpdateEnabled)) {\\n    return resourceConfig.optimisticUpdateEnabled;\\n  }\\n  if (isBool(config.resources.optimisticUpdateEnabled)) {\\n    return config.resources.optimisticUpdateEnabled;\\n  }\\n  if (isBool(config.optimisticUpdateEnabled)) {\\n    return config.optimisticUpdateEnabled;\\n  }\\n  if (isBool(defaultConfig.optimisticUpdateEnabled)) {\\n    return defaultConfig.optimisticUpdateEnabled;\\n  }\\n\\n  return true;\\n}\\n\\nfunction determineResourceType(_ref2) {\\n  var controller = _ref2.controller;\\n\\n  // resource type is determined by wether or not the controller name is plural\\n  // this may be overly simplistic\\n  // example: 'bus' is a memeber, but would return collection here\\n  if (controller[controller.length - 1] === 's') {\\n    return 'collection';\\n  }\\n\\n  return 'member';\\n}\\n\\nfunction getResourceNameSpace(_ref3) {\\n  var config = _ref3.config,\\n      resource = _ref3.resource;\\n\\n  // returns either 'models' or 'attributes' based on resource type\\n  var controller = config.resources[resource].controller;\\n  var resourceType = determineResourceType({ controller: controller });\\n\\n  return resourceType === 'collection' ? 'models' : 'attributes';\\n}\\n\\nfunction getResourceIdAttribute(_ref4) {\\n  var config = _ref4.config,\\n      resource = _ref4.resource;\\n\\n  return config.resources[resource].idAttribute || 'id';\\n}\\n\\nfunction getUniqueClientId() {\\n  return ++uniqueClientId;\\n}\\n\\nfunction isBool(val) {\\n  return typeof val === 'boolean';\\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvdXRpbGl0aWVzLmpzP2I1YzgiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IHVuaXF1ZUNsaWVudElkID0gMFxuXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5PcHRpbWlzdGljVXBkYXRlU2V0dGluZyh7cmVzb3VyY2VDb25maWcsIGNvbmZpZywgZGVmYXVsdENvbmZpZz17fX0pIHtcbiAgaWYgKGlzQm9vbChyZXNvdXJjZUNvbmZpZy5vcHRpbWlzdGljVXBkYXRlRW5hYmxlZCkpIHsgcmV0dXJuIHJlc291cmNlQ29uZmlnLm9wdGltaXN0aWNVcGRhdGVFbmFibGVkIH1cbiAgaWYgKGlzQm9vbChjb25maWcucmVzb3VyY2VzLm9wdGltaXN0aWNVcGRhdGVFbmFibGVkKSkgeyByZXR1cm4gY29uZmlnLnJlc291cmNlcy5vcHRpbWlzdGljVXBkYXRlRW5hYmxlZCB9XG4gIGlmIChpc0Jvb2woY29uZmlnLm9wdGltaXN0aWNVcGRhdGVFbmFibGVkKSkgeyByZXR1cm4gY29uZmlnLm9wdGltaXN0aWNVcGRhdGVFbmFibGVkIH1cbiAgaWYgKGlzQm9vbChkZWZhdWx0Q29uZmlnLm9wdGltaXN0aWNVcGRhdGVFbmFibGVkKSkgeyByZXR1cm4gZGVmYXVsdENvbmZpZy5vcHRpbWlzdGljVXBkYXRlRW5hYmxlZCB9XG5cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluZVJlc291cmNlVHlwZSh7Y29udHJvbGxlcn0pIHtcbiAgLy8gcmVzb3VyY2UgdHlwZSBpcyBkZXRlcm1pbmVkIGJ5IHdldGhlciBvciBub3QgdGhlIGNvbnRyb2xsZXIgbmFtZSBpcyBwbHVyYWxcbiAgLy8gdGhpcyBtYXkgYmUgb3Zlcmx5IHNpbXBsaXN0aWNcbiAgLy8gZXhhbXBsZTogJ2J1cycgaXMgYSBtZW1lYmVyLCBidXQgd291bGQgcmV0dXJuIGNvbGxlY3Rpb24gaGVyZVxuICBpZiAoY29udHJvbGxlcltjb250cm9sbGVyLmxlbmd0aCAtIDFdID09PSAncycpIHtcbiAgICByZXR1cm4gJ2NvbGxlY3Rpb24nXG4gIH1cblxuICByZXR1cm4gJ21lbWJlcidcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlc291cmNlTmFtZVNwYWNlKHtjb25maWcsIHJlc291cmNlfSkge1xuICAvLyByZXR1cm5zIGVpdGhlciAnbW9kZWxzJyBvciAnYXR0cmlidXRlcycgYmFzZWQgb24gcmVzb3VyY2UgdHlwZVxuICBjb25zdCBjb250cm9sbGVyID0gY29uZmlnLnJlc291cmNlc1tyZXNvdXJjZV0uY29udHJvbGxlclxuICBjb25zdCByZXNvdXJjZVR5cGUgPSBkZXRlcm1pbmVSZXNvdXJjZVR5cGUoe2NvbnRyb2xsZXJ9KVxuXG4gIHJldHVybiAocmVzb3VyY2VUeXBlID09PSAnY29sbGVjdGlvbicpID8gJ21vZGVscycgOiAnYXR0cmlidXRlcydcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlc291cmNlSWRBdHRyaWJ1dGUoe2NvbmZpZywgcmVzb3VyY2V9KSB7XG4gIHJldHVybiBjb25maWcucmVzb3VyY2VzW3Jlc291cmNlXS5pZEF0dHJpYnV0ZSB8fCAnaWQnXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVbmlxdWVDbGllbnRJZCgpIHtcbiAgcmV0dXJuICsrdW5pcXVlQ2xpZW50SWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQm9vbCh2YWwpIHsgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdib29sZWFuJyB9XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL3V0aWxpdGllcy5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQTtBQVNBO0FBV0E7QUFRQTtBQUlBO0FBSUE7QUF0Q0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 2 */\n\t\t/***/function (module, __webpack_exports__, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__root_js__ = __webpack_require__(19);\\n\\n\\n/** Built-in value references. */\\nvar Symbol = __WEBPACK_IMPORTED_MODULE_0__root_js__[\\\"a\\\" /* default */].Symbol;\\n\\n/* harmony default export */ __webpack_exports__[\\\"a\\\"] = Symbol;\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vbG9kYXNoLWVzL19TeW1ib2wuanM/NjRjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bWJvbDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9sb2Rhc2gtZXMvX1N5bWJvbC5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 3 */\n\t\t/***/function (module, __webpack_exports__, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__ = __webpack_require__(13);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__getPrototype_js__ = __webpack_require__(15);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__isObjectLike_js__ = __webpack_require__(20);\\n\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar objectTag = '[object Object]';\\n\\n/** Used for built-in method references. */\\nvar funcProto = Function.prototype,\\n    objectProto = Object.prototype;\\n\\n/** Used to resolve the decompiled source of functions. */\\nvar funcToString = funcProto.toString;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/** Used to infer the `Object` constructor. */\\nvar objectCtorString = funcToString.call(Object);\\n\\n/**\\n * Checks if `value` is a plain object, that is, an object created by the\\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.8.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\\n * @example\\n *\\n * function Foo() {\\n *   this.a = 1;\\n * }\\n *\\n * _.isPlainObject(new Foo);\\n * // => false\\n *\\n * _.isPlainObject([1, 2, 3]);\\n * // => false\\n *\\n * _.isPlainObject({ 'x': 0, 'y': 0 });\\n * // => true\\n *\\n * _.isPlainObject(Object.create(null));\\n * // => true\\n */\\nfunction isPlainObject(value) {\\n  if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__isObjectLike_js__[\\\"a\\\" /* default */])(value) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__[\\\"a\\\" /* default */])(value) != objectTag) {\\n    return false;\\n  }\\n  var proto = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__getPrototype_js__[\\\"a\\\" /* default */])(value);\\n  if (proto === null) {\\n    return true;\\n  }\\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\\n    funcToString.call(Ctor) == objectCtorString;\\n}\\n\\n/* harmony default export */ __webpack_exports__[\\\"a\\\"] = isPlainObject;\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vbG9kYXNoLWVzL2lzUGxhaW5PYmplY3QuanM/ZjVhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBnZXRQcm90b3R5cGUgZnJvbSAnLi9fZ2V0UHJvdG90eXBlLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUGxhaW5PYmplY3Q7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoLWVzL2lzUGxhaW5PYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 4 */\n\t\t/***/function (module, exports) {\n\n\t\t\teval(\"// shim for using process in browser\\nvar process = module.exports = {};\\n\\n// cached from whatever global is present so that test runners that stub it\\n// don't break things.  But we need to wrap it in a try catch in case it is\\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\\n// function because try/catches deoptimize in certain engines.\\n\\nvar cachedSetTimeout;\\nvar cachedClearTimeout;\\n\\nfunction defaultSetTimout() {\\n    throw new Error('setTimeout has not been defined');\\n}\\nfunction defaultClearTimeout () {\\n    throw new Error('clearTimeout has not been defined');\\n}\\n(function () {\\n    try {\\n        if (typeof setTimeout === 'function') {\\n            cachedSetTimeout = setTimeout;\\n        } else {\\n            cachedSetTimeout = defaultSetTimout;\\n        }\\n    } catch (e) {\\n        cachedSetTimeout = defaultSetTimout;\\n    }\\n    try {\\n        if (typeof clearTimeout === 'function') {\\n            cachedClearTimeout = clearTimeout;\\n        } else {\\n            cachedClearTimeout = defaultClearTimeout;\\n        }\\n    } catch (e) {\\n        cachedClearTimeout = defaultClearTimeout;\\n    }\\n} ())\\nfunction runTimeout(fun) {\\n    if (cachedSetTimeout === setTimeout) {\\n        //normal enviroments in sane situations\\n        return setTimeout(fun, 0);\\n    }\\n    // if setTimeout wasn't available but was latter defined\\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\\n        cachedSetTimeout = setTimeout;\\n        return setTimeout(fun, 0);\\n    }\\n    try {\\n        // when when somebody has screwed with setTimeout but no I.E. maddness\\n        return cachedSetTimeout(fun, 0);\\n    } catch(e){\\n        try {\\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\\n            return cachedSetTimeout.call(null, fun, 0);\\n        } catch(e){\\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\\n            return cachedSetTimeout.call(this, fun, 0);\\n        }\\n    }\\n\\n\\n}\\nfunction runClearTimeout(marker) {\\n    if (cachedClearTimeout === clearTimeout) {\\n        //normal enviroments in sane situations\\n        return clearTimeout(marker);\\n    }\\n    // if clearTimeout wasn't available but was latter defined\\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\\n        cachedClearTimeout = clearTimeout;\\n        return clearTimeout(marker);\\n    }\\n    try {\\n        // when when somebody has screwed with setTimeout but no I.E. maddness\\n        return cachedClearTimeout(marker);\\n    } catch (e){\\n        try {\\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\\n            return cachedClearTimeout.call(null, marker);\\n        } catch (e){\\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\\n            return cachedClearTimeout.call(this, marker);\\n        }\\n    }\\n\\n\\n\\n}\\nvar queue = [];\\nvar draining = false;\\nvar currentQueue;\\nvar queueIndex = -1;\\n\\nfunction cleanUpNextTick() {\\n    if (!draining || !currentQueue) {\\n        return;\\n    }\\n    draining = false;\\n    if (currentQueue.length) {\\n        queue = currentQueue.concat(queue);\\n    } else {\\n        queueIndex = -1;\\n    }\\n    if (queue.length) {\\n        drainQueue();\\n    }\\n}\\n\\nfunction drainQueue() {\\n    if (draining) {\\n        return;\\n    }\\n    var timeout = runTimeout(cleanUpNextTick);\\n    draining = true;\\n\\n    var len = queue.length;\\n    while(len) {\\n        currentQueue = queue;\\n        queue = [];\\n        while (++queueIndex < len) {\\n            if (currentQueue) {\\n                currentQueue[queueIndex].run();\\n            }\\n        }\\n        queueIndex = -1;\\n        len = queue.length;\\n    }\\n    currentQueue = null;\\n    draining = false;\\n    runClearTimeout(timeout);\\n}\\n\\nprocess.nextTick = function (fun) {\\n    var args = new Array(arguments.length - 1);\\n    if (arguments.length > 1) {\\n        for (var i = 1; i < arguments.length; i++) {\\n            args[i - 1] = arguments[i];\\n        }\\n    }\\n    queue.push(new Item(fun, args));\\n    if (queue.length === 1 && !draining) {\\n        runTimeout(drainQueue);\\n    }\\n};\\n\\n// v8 likes predictible objects\\nfunction Item(fun, array) {\\n    this.fun = fun;\\n    this.array = array;\\n}\\nItem.prototype.run = function () {\\n    this.fun.apply(null, this.array);\\n};\\nprocess.title = 'browser';\\nprocess.browser = true;\\nprocess.env = {};\\nprocess.argv = [];\\nprocess.version = ''; // empty string to avoid regexp issues\\nprocess.versions = {};\\n\\nfunction noop() {}\\n\\nprocess.on = noop;\\nprocess.addListener = noop;\\nprocess.once = noop;\\nprocess.off = noop;\\nprocess.removeListener = noop;\\nprocess.removeAllListeners = noop;\\nprocess.emit = noop;\\n\\nprocess.binding = function (name) {\\n    throw new Error('process.binding is not supported');\\n};\\n\\nprocess.cwd = function () { return '/' };\\nprocess.chdir = function (dir) {\\n    throw new Error('process.chdir is not supported');\\n};\\nprocess.umask = function() { return 0; };\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 5 */\n\t\t/***/function (module, __webpack_exports__, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/* harmony export (immutable) */ __webpack_exports__[\\\"a\\\"] = compose;\\n/**\\n * Composes single-argument functions from right to left. The rightmost\\n * function can take multiple arguments as it provides the signature for\\n * the resulting composite function.\\n *\\n * @param {...Function} funcs The functions to compose.\\n * @returns {Function} A function obtained by composing the argument functions\\n * from right to left. For example, compose(f, g, h) is identical to doing\\n * (...args) => f(g(h(...args))).\\n */\\n\\nfunction compose() {\\n  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {\\n    funcs[_key] = arguments[_key];\\n  }\\n\\n  if (funcs.length === 0) {\\n    return function (arg) {\\n      return arg;\\n    };\\n  }\\n\\n  if (funcs.length === 1) {\\n    return funcs[0];\\n  }\\n\\n  var last = funcs[funcs.length - 1];\\n  var rest = funcs.slice(0, -1);\\n  return function () {\\n    return rest.reduceRight(function (composed, f) {\\n      return f(composed);\\n    }, last.apply(undefined, arguments));\\n  };\\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vcmVkdXgvZXMvY29tcG9zZS5qcz80MWQ2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICB2YXIgbGFzdCA9IGZ1bmNzW2Z1bmNzLmxlbmd0aCAtIDFdO1xuICB2YXIgcmVzdCA9IGZ1bmNzLnNsaWNlKDAsIC0xKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmVzdC5yZWR1Y2VSaWdodChmdW5jdGlvbiAoY29tcG9zZWQsIGYpIHtcbiAgICAgIHJldHVybiBmKGNvbXBvc2VkKTtcbiAgICB9LCBsYXN0LmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlZHV4L2VzL2NvbXBvc2UuanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 6 */\n\t\t/***/function (module, __webpack_exports__, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_es_isPlainObject__ = __webpack_require__(3);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_symbol_observable__ = __webpack_require__(25);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_symbol_observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_symbol_observable__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"b\\\", function() { return ActionTypes; });\\n/* harmony export (immutable) */ __webpack_exports__[\\\"a\\\"] = createStore;\\n\\n\\n\\n/**\\n * These are private action types reserved by Redux.\\n * For any unknown actions, you must return the current state.\\n * If the current state is undefined, you must return the initial state.\\n * Do not reference these action types directly in your code.\\n */\\nvar ActionTypes = {\\n  INIT: '@@redux/INIT'\\n};\\n\\n/**\\n * Creates a Redux store that holds the state tree.\\n * The only way to change the data in the store is to call `dispatch()` on it.\\n *\\n * There should only be a single store in your app. To specify how different\\n * parts of the state tree respond to actions, you may combine several reducers\\n * into a single reducer function by using `combineReducers`.\\n *\\n * @param {Function} reducer A function that returns the next state tree, given\\n * the current state tree and the action to handle.\\n *\\n * @param {any} [preloadedState] The initial state. You may optionally specify it\\n * to hydrate the state from the server in universal apps, or to restore a\\n * previously serialized user session.\\n * If you use `combineReducers` to produce the root reducer function, this must be\\n * an object with the same shape as `combineReducers` keys.\\n *\\n * @param {Function} enhancer The store enhancer. You may optionally specify it\\n * to enhance the store with third-party capabilities such as middleware,\\n * time travel, persistence, etc. The only store enhancer that ships with Redux\\n * is `applyMiddleware()`.\\n *\\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\\n * and subscribe to changes.\\n */\\nfunction createStore(reducer, preloadedState, enhancer) {\\n  var _ref2;\\n\\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\\n    enhancer = preloadedState;\\n    preloadedState = undefined;\\n  }\\n\\n  if (typeof enhancer !== 'undefined') {\\n    if (typeof enhancer !== 'function') {\\n      throw new Error('Expected the enhancer to be a function.');\\n    }\\n\\n    return enhancer(createStore)(reducer, preloadedState);\\n  }\\n\\n  if (typeof reducer !== 'function') {\\n    throw new Error('Expected the reducer to be a function.');\\n  }\\n\\n  var currentReducer = reducer;\\n  var currentState = preloadedState;\\n  var currentListeners = [];\\n  var nextListeners = currentListeners;\\n  var isDispatching = false;\\n\\n  function ensureCanMutateNextListeners() {\\n    if (nextListeners === currentListeners) {\\n      nextListeners = currentListeners.slice();\\n    }\\n  }\\n\\n  /**\\n   * Reads the state tree managed by the store.\\n   *\\n   * @returns {any} The current state tree of your application.\\n   */\\n  function getState() {\\n    return currentState;\\n  }\\n\\n  /**\\n   * Adds a change listener. It will be called any time an action is dispatched,\\n   * and some part of the state tree may potentially have changed. You may then\\n   * call `getState()` to read the current state tree inside the callback.\\n   *\\n   * You may call `dispatch()` from a change listener, with the following\\n   * caveats:\\n   *\\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\\n   * will not have any effect on the `dispatch()` that is currently in progress.\\n   * However, the next `dispatch()` call, whether nested or not, will use a more\\n   * recent snapshot of the subscription list.\\n   *\\n   * 2. The listener should not expect to see all state changes, as the state\\n   * might have been updated multiple times during a nested `dispatch()` before\\n   * the listener is called. It is, however, guaranteed that all subscribers\\n   * registered before the `dispatch()` started will be called with the latest\\n   * state by the time it exits.\\n   *\\n   * @param {Function} listener A callback to be invoked on every dispatch.\\n   * @returns {Function} A function to remove this change listener.\\n   */\\n  function subscribe(listener) {\\n    if (typeof listener !== 'function') {\\n      throw new Error('Expected listener to be a function.');\\n    }\\n\\n    var isSubscribed = true;\\n\\n    ensureCanMutateNextListeners();\\n    nextListeners.push(listener);\\n\\n    return function unsubscribe() {\\n      if (!isSubscribed) {\\n        return;\\n      }\\n\\n      isSubscribed = false;\\n\\n      ensureCanMutateNextListeners();\\n      var index = nextListeners.indexOf(listener);\\n      nextListeners.splice(index, 1);\\n    };\\n  }\\n\\n  /**\\n   * Dispatches an action. It is the only way to trigger a state change.\\n   *\\n   * The `reducer` function, used to create the store, will be called with the\\n   * current state tree and the given `action`. Its return value will\\n   * be considered the **next** state of the tree, and the change listeners\\n   * will be notified.\\n   *\\n   * The base implementation only supports plain object actions. If you want to\\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\\n   * wrap your store creating function into the corresponding middleware. For\\n   * example, see the documentation for the `redux-thunk` package. Even the\\n   * middleware will eventually dispatch plain object actions using this method.\\n   *\\n   * @param {Object} action A plain object representing “what changed”. It is\\n   * a good idea to keep actions serializable so you can record and replay user\\n   * sessions, or use the time travelling `redux-devtools`. An action must have\\n   * a `type` property which may not be `undefined`. It is a good idea to use\\n   * string constants for action types.\\n   *\\n   * @returns {Object} For convenience, the same action object you dispatched.\\n   *\\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\\n   * return something else (for example, a Promise you can await).\\n   */\\n  function dispatch(action) {\\n    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_lodash_es_isPlainObject__[\\\"a\\\" /* default */])(action)) {\\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\\n    }\\n\\n    if (typeof action.type === 'undefined') {\\n      throw new Error('Actions may not have an undefined \\\"type\\\" property. ' + 'Have you misspelled a constant?');\\n    }\\n\\n    if (isDispatching) {\\n      throw new Error('Reducers may not dispatch actions.');\\n    }\\n\\n    try {\\n      isDispatching = true;\\n      currentState = currentReducer(currentState, action);\\n    } finally {\\n      isDispatching = false;\\n    }\\n\\n    var listeners = currentListeners = nextListeners;\\n    for (var i = 0; i < listeners.length; i++) {\\n      listeners[i]();\\n    }\\n\\n    return action;\\n  }\\n\\n  /**\\n   * Replaces the reducer currently used by the store to calculate the state.\\n   *\\n   * You might need this if your app implements code splitting and you want to\\n   * load some of the reducers dynamically. You might also need this if you\\n   * implement a hot reloading mechanism for Redux.\\n   *\\n   * @param {Function} nextReducer The reducer for the store to use instead.\\n   * @returns {void}\\n   */\\n  function replaceReducer(nextReducer) {\\n    if (typeof nextReducer !== 'function') {\\n      throw new Error('Expected the nextReducer to be a function.');\\n    }\\n\\n    currentReducer = nextReducer;\\n    dispatch({ type: ActionTypes.INIT });\\n  }\\n\\n  /**\\n   * Interoperability point for observable/reactive libraries.\\n   * @returns {observable} A minimal observable of state changes.\\n   * For more information, see the observable proposal:\\n   * https://github.com/zenparsing/es-observable\\n   */\\n  function observable() {\\n    var _ref;\\n\\n    var outerSubscribe = subscribe;\\n    return _ref = {\\n      /**\\n       * The minimal observable subscription method.\\n       * @param {Object} observer Any object that can be used as an observer.\\n       * The observer object should have a `next` method.\\n       * @returns {subscription} An object with an `unsubscribe` method that can\\n       * be used to unsubscribe the observable from the store, and prevent further\\n       * emission of values from the observable.\\n       */\\n      subscribe: function subscribe(observer) {\\n        if (typeof observer !== 'object') {\\n          throw new TypeError('Expected the observer to be an object.');\\n        }\\n\\n        function observeState() {\\n          if (observer.next) {\\n            observer.next(getState());\\n          }\\n        }\\n\\n        observeState();\\n        var unsubscribe = outerSubscribe(observeState);\\n        return { unsubscribe: unsubscribe };\\n      }\\n    }, _ref[__WEBPACK_IMPORTED_MODULE_1_symbol_observable___default.a] = function () {\\n      return this;\\n    }, _ref;\\n  }\\n\\n  // When a store is created, an \\\"INIT\\\" action is dispatched so that every\\n  // reducer returns their initial state. This effectively populates\\n  // the initial state tree.\\n  dispatch({ type: ActionTypes.INIT });\\n\\n  return _ref2 = {\\n    dispatch: dispatch,\\n    subscribe: subscribe,\\n    getState: getState,\\n    replaceReducer: replaceReducer\\n  }, _ref2[__WEBPACK_IMPORTED_MODULE_1_symbol_observable___default.a] = observable, _ref2;\\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 7 */\n\t\t/***/function (module, __webpack_exports__, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/* harmony export (immutable) */ __webpack_exports__[\\\"a\\\"] = warning;\\n/**\\n * Prints a warning in the console if it exists.\\n *\\n * @param {String} message The warning message.\\n * @returns {void}\\n */\\nfunction warning(message) {\\n  /* eslint-disable no-console */\\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\\n    console.error(message);\\n  }\\n  /* eslint-enable no-console */\\n  try {\\n    // This error was thrown as a convenience so that if you enable\\n    // \\\"break on all exceptions\\\" in your console,\\n    // it would pause the execution at this line.\\n    throw new Error(message);\\n    /* eslint-disable no-empty */\\n  } catch (e) {}\\n  /* eslint-enable no-empty */\\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vcmVkdXgvZXMvdXRpbHMvd2FybmluZy5qcz85ODUzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1lbXB0eSAqL1xuICB9IGNhdGNoIChlKSB7fVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWVtcHR5ICovXG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlZHV4L2VzL3V0aWxzL3dhcm5pbmcuanNcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 8 */\n\t\t/***/function (module, exports) {\n\n\t\t\teval(\"var g;\\r\\n\\r\\n// This works in non-strict mode\\r\\ng = (function() {\\r\\n\\treturn this;\\r\\n})();\\r\\n\\r\\ntry {\\r\\n\\t// This works if eval is allowed (see CSP)\\r\\n\\tg = g || Function(\\\"return this\\\")() || (1,eval)(\\\"this\\\");\\r\\n} catch(e) {\\r\\n\\t// This works if the window reference is available\\r\\n\\tif(typeof window === \\\"object\\\")\\r\\n\\t\\tg = window;\\r\\n}\\r\\n\\r\\n// g can still be undefined, but nothing to do about it...\\r\\n// We return undefined, instead of nothing here, so it's\\r\\n// easier to handle this case. if(!global) { ...}\\r\\n\\r\\nmodule.exports = g;\\r\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/MzY5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 9 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\\n\\nvar _redux = __webpack_require__(24);\\n\\nvar _utilities = __webpack_require__(1);\\n\\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\\n\\nvar apiDefaultState = {\\n  loading: false,\\n  loadingError: undefined,\\n  __prevData: undefined\\n};\\n\\n// reducer utilities\\nvar findModel = function findModel(_ref) {\\n  var id = _ref.id,\\n      cId = _ref.cId,\\n      state = _ref.state;\\n\\n  // returns model, found by id or cId, from state.models array\\n  var models = state.models && state.models.slice(0) || [];\\n  var hasId = void 0;\\n  var hasCid = void 0;\\n\\n  return models.find(function (model) {\\n    hasId = typeof model.id !== 'undefined';\\n    hasCid = typeof cId !== 'undefined';\\n    return hasId && model.id === id || hasCid && model.cId === cId;\\n  });\\n};\\n\\nvar createNewModel = function createNewModel(_ref2) {\\n  var id = _ref2.id,\\n      cId = _ref2.cId,\\n      metaData = _ref2.metaData,\\n      _ref2$attributes = _ref2.attributes,\\n      attributes = _ref2$attributes === undefined ? {} : _ref2$attributes;\\n\\n  // returns a new model with default metaData.\\n  // uses optionally passed id, cId and attributes\\n  var innerData = { id: id, cId: cId,\\n    attributes: Object.assign({}, attributes)\\n  };\\n\\n  // squash undefined key/values\\n  Object.keys(innerData).forEach(function (key) {\\n    return innerData[key] === undefined ? delete innerData[key] : '';\\n  });\\n\\n  return Object.assign({}, apiDefaultState, metaData, innerData);\\n};\\n\\nvar createNewCollection = function createNewCollection(_ref3) {\\n  var metaData = _ref3.metaData,\\n      _ref3$models = _ref3.models,\\n      models = _ref3$models === undefined ? [] : _ref3$models;\\n\\n  // returns a new collection with default metaData and models array\\n  return Object.assign({}, apiDefaultState, metaData, { models: models });\\n};\\n\\nvar collectionWithNewModel = function collectionWithNewModel(_ref4) {\\n  var state = _ref4.state,\\n      model = _ref4.model;\\n\\n  // returns new array with model inserted\\n  var models = state.models || [];\\n\\n  return [].concat(_toConsumableArray(models), [model]);\\n};\\n\\nvar collectionWithUpdatedModel = function collectionWithUpdatedModel(_ref5) {\\n  var id = _ref5.id,\\n      cId = _ref5.cId,\\n      state = _ref5.state,\\n      updatedModel = _ref5.updatedModel;\\n\\n  // returns collection (models array) with model's attributes updated\\n  var models = state.models && state.models.slice(0) || [];\\n  var hasId = void 0;\\n  var hasCid = void 0;\\n\\n  return models.map(function (model) {\\n    hasId = typeof model.id !== 'undefined';\\n    hasCid = typeof cId !== 'undefined';\\n\\n    if ((!hasId || model.id !== id) && (!hasCid || model.cId !== cId)) {\\n      return model;\\n    }\\n\\n    return updatedModel;\\n  });\\n};\\n\\nvar setMemberAttributes = function setMemberAttributes(_ref6) {\\n  var id = _ref6.id,\\n      data = _ref6.data,\\n      metaData = _ref6.metaData,\\n      state = _ref6.state,\\n      cId = _ref6.cId,\\n      _ref6$replaceAttribut = _ref6.replaceAttributes,\\n      replaceAttributes = _ref6$replaceAttribut === undefined ? true : _ref6$replaceAttribut,\\n      _ref6$replaceMeta = _ref6.replaceMeta,\\n      replaceMeta = _ref6$replaceMeta === undefined ? true : _ref6$replaceMeta;\\n\\n  var currentModel = findModel({ id: id, cId: cId, state: state });\\n  var newAttributes = void 0;\\n  var currentMeta = {};\\n  var newMeta = metaData;\\n\\n  if (!currentModel) {\\n    // model does not yet exist in models array -- create it.\\n    return collectionWithNewModel({ state: state,\\n      model: createNewModel({ id: id, cId: cId, metaData: metaData, attributes: data })\\n    });\\n  }\\n\\n  newAttributes = replaceAttributes ? data : Object.assign({}, currentModel.attributes, data);\\n\\n  // keep cId of model around, if it has one\\n  if (!cId && currentModel.cId) {\\n    cId = currentModel.cId;\\n  }\\n\\n  // model already exists in model array -- replace its attributes.\\n  return collectionWithUpdatedModel({ id: id, cId: cId, state: state,\\n    updatedModel: createNewModel({ id: id, cId: cId, metaData: metaData, attributes: newAttributes })\\n  });\\n};\\n\\nvar destroyMember = function destroyMember(_ref7) {\\n  var id = _ref7.id,\\n      state = _ref7.state;\\n\\n  return state.models.filter(function (model) {\\n    return model.id !== id;\\n  });\\n};\\n\\nvar setMemberLoading = function setMemberLoading(_ref8) {\\n  var id = _ref8.id,\\n      cId = _ref8.cId,\\n      state = _ref8.state,\\n      queryParams = _ref8.queryParams;\\n\\n  // sets the loading state of a member within a collection\\n  var currentModel = findModel({ id: id, cId: cId, state: state });\\n\\n  if (!currentModel) {\\n    // model does not yet exist in models array -- create it.\\n    return collectionWithNewModel({ state: state,\\n      model: createNewModel({ id: id, cId: cId,\\n        metaData: { loading: true, queryParams: queryParams }\\n      })\\n    });\\n  }\\n\\n  // model already exists in model array -- update its loading state.\\n  return collectionWithUpdatedModel({ id: id, cId: cId, state: state,\\n    updatedModel: createNewModel({ id: id, cId: cId,\\n      metaData: { loading: true, queryParams: queryParams },\\n      attributes: currentModel.attributes\\n    }) });\\n};\\n\\nvar setMemberLoadingError = function setMemberLoadingError(_ref9) {\\n  var id = _ref9.id,\\n      cId = _ref9.cId,\\n      state = _ref9.state,\\n      error = _ref9.error;\\n\\n  // this function sets the loading error state of a member in a collection\\n  var currentModel = findModel({ id: id, cId: cId, state: state });\\n\\n  if (!currentModel && !id) {\\n    return state.models.slice(0);\\n  }\\n\\n  if (!currentModel) {\\n    // model does not yet exist in models array -- create it.\\n    return collectionWithNewModel({ state: state,\\n      model: createNewModel({ id: id,\\n        metaData: { loadingError: error }\\n      })\\n    });\\n  }\\n\\n  // single model within a collection -- find it and set its loading state.\\n  return collectionWithUpdatedModel({ id: id, state: state, cId: cId,\\n    updatedModel: createNewModel(_extends({}, currentModel, {\\n      metaData: { loadingError: error, __prevData: currentModel.__prevData }\\n    })) });\\n};\\n\\nvar getInitialState = function getInitialState(_ref10) {\\n  var config = _ref10.config,\\n      resource = _ref10.resource;\\n\\n  // converts models/attributes passed in with the config to match\\n  // redux rais internal models/collections\\n  // If not models/attributes present, returns apiDefaultState\\n  var resourceNameSpace = (0, _utilities.getResourceNameSpace)({ config: config, resource: resource });\\n  var isSingleModel = resourceNameSpace === 'attributes';\\n  var resourceConfig = config.resources[resource] || {};\\n  var idAttribute = (0, _utilities.getResourceIdAttribute)({ config: config, resource: resource });\\n  var id = void 0;\\n\\n  if (isSingleModel) {\\n    id = resourceConfig[resourceNameSpace] ? resourceConfig[idAttribute] || resourceConfig.attributes[idAttribute] : undefined;\\n\\n    return createNewModel({ id: id, idAttribute: idAttribute,\\n      attributes: resourceConfig.attributes\\n    });\\n  }\\n\\n  return createNewCollection({\\n    models: (resourceConfig.models || []).map(function (m) {\\n      return createNewModel({\\n        idAttribute: idAttribute,\\n        id: m[idAttribute],\\n        attributes: m\\n      });\\n    })\\n  });\\n};\\n\\n// main reducer\\n\\nexports.default = function (config) {\\n  var reducers = {};\\n\\n  Object.keys(config.resources).forEach(function (resource) {\\n    reducers[resource] = function () {\\n      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getInitialState({ config: config, resource: resource });\\n      var action = arguments[1];\\n\\n      var resourceNameSpace = (0, _utilities.getResourceNameSpace)({ config: config, resource: resource });\\n      var isSingleModel = resourceNameSpace === 'attributes';\\n      var idAttribute = (0, _utilities.getResourceIdAttribute)({ config: config, resource: resource });\\n\\n      var _ref11 = action.data || {},\\n          queryParams = _ref11.queryParams;\\n\\n      switch (action.type) {\\n        case resource + '.INDEX':\\n          {\\n            return Object.assign({}, state, createNewCollection({\\n              metaData: {\\n                loading: true,\\n                queryParams: queryParams\\n              }\\n            }));\\n          }\\n        case resource + '.INDEX_SUCCESS':\\n          {\\n            var response = action.response;\\n            var responseResource = action.response[resource] || action.response[resource.toLowerCase()];\\n\\n            if (!Array.isArray(action.response)) {\\n              if (responseResource && Array.isArray(responseResource)) {\\n                // if top level key exists in response, and is an array, use that as data\\n                // this is essentially an automatic parse, since top level responses being an array\\n                // is a security issue for many sites\\n                response = responseResource;\\n              } else {\\n                console.error('Response to INDEX actions must be of type array OR contain a top-level key matching the resource name with an array as the value. You can use the parse method(s) set in your config for this resource to transform returned data if needed.');\\n\\n                return Object.assign({}, state, createNewCollection({\\n                  metaData: {\\n                    loading: false,\\n                    loadingError: 'Bad data received from server. INDEX calls expect an array.'\\n                  }\\n                }));\\n              }\\n            }\\n\\n            return Object.assign({}, state, createNewCollection({\\n              models: response.map(function (model) {\\n                return createNewModel({\\n                  id: model[idAttribute],\\n                  attributes: model\\n                });\\n              })\\n            }));\\n          }\\n        case resource + '.INDEX_ERROR':\\n          {\\n            var error = action.error;\\n\\n\\n            return Object.assign({}, state, createNewCollection({\\n              metaData: {\\n                loading: false,\\n                loadingError: error\\n              }\\n            }));\\n          }\\n        case resource + '.SHOW':\\n          {\\n            var data = action.data || {};\\n            var id = data.id;\\n\\n\\n            if (isSingleModel) {\\n              return createNewModel({\\n                metaData: { loading: true, queryParams: queryParams },\\n                attributes: state.attributes\\n              });\\n            }\\n\\n            return Object.assign({}, state, {\\n              models: setMemberLoading({ id: id, state: state, queryParams: queryParams })\\n            });\\n          }\\n        case resource + '.SHOW_SUCCESS':\\n          {\\n            var _id = action.id;\\n\\n            var _data = action.response;\\n\\n            if (isSingleModel) {\\n              return createNewModel({ id: _id,\\n                attributes: Object.assign({}, state.attributes, _data)\\n              });\\n            }\\n\\n            return Object.assign({}, state, createNewCollection({\\n              models: setMemberAttributes({ id: _id, data: _data, state: state,\\n                metaData: { loading: false }\\n              })\\n            }));\\n          }\\n        case resource + '.SHOW_ERROR':\\n          {\\n            var _id2 = action.id,\\n                _error = action.error;\\n\\n\\n            if (isSingleModel) {\\n              return createNewModel({ id: _id2,\\n                attributes: Object.assign({}, state.attributes),\\n                metaData: { loadingError: _error }\\n              });\\n            }\\n\\n            return Object.assign({}, state, {\\n              models: setMemberLoadingError({ state: state, id: _id2, error: _error })\\n            });\\n          }\\n        case resource + '.ASSIGN_CID':\\n          {\\n            var cId = action.cId;\\n\\n\\n            if (isSingleModel) {\\n              return createNewModel({ cId: cId });\\n            }\\n\\n            return createNewCollection({\\n              models: setMemberAttributes({ cId: cId, state: state })\\n            });\\n          }\\n        case resource + '.CREATE_SUCCESS':\\n          {\\n            var _data2 = action.response;\\n            var _cId = action.cId,\\n                _id3 = action.id;\\n\\n\\n            if (isSingleModel) {\\n              return createNewModel({ id: _id3, cId: _cId,\\n                attributes: Object.assign({}, state.attributes, _data2)\\n              });\\n            }\\n\\n            return createNewCollection({\\n              models: setMemberAttributes({ data: _data2, state: state, id: _id3, cId: _cId })\\n            });\\n          }\\n        case resource + '.CREATE_ERROR':\\n          {\\n            var _id4 = action.id,\\n                _cId2 = action.cId,\\n                _error2 = action.error;\\n\\n\\n            if (isSingleModel) {\\n              return createNewModel({ id: _id4, cId: _cId2,\\n                metaData: { loadingError: _error2 }\\n              });\\n            }\\n\\n            return Object.assign({}, state, {\\n              models: setMemberLoadingError({ state: state, id: _id4, cId: _cId2, error: _error2 })\\n            });\\n          }\\n        case resource + '.UPDATE':\\n          {\\n            var _data3 = action.data || {};\\n            var _id5 = _data3.id;\\n\\n            var __prevData = state.__prevData;\\n\\n            if (isSingleModel) {\\n              return createNewModel({ id: _id5,\\n                metaData: { loading: true, __prevData: __prevData },\\n                attributes: state.attributes\\n              });\\n            }\\n\\n            return Object.assign({}, state, {\\n              models: setMemberLoading({ id: _id5, state: state })\\n            });\\n          }\\n        case resource + '.UPDATE_SUCCESS':\\n          {\\n            var _id6 = action.id;\\n\\n            var _data4 = action.response;\\n\\n            if (isSingleModel) {\\n              return createNewModel({ id: _id6,\\n                attributes: Object.assign({}, state.attributes, _data4)\\n              });\\n            }\\n\\n            return Object.assign({}, state, {\\n              models: setMemberAttributes({ id: _id6, data: _data4, state: state, replaceAttributes: false })\\n            });\\n          }\\n        case resource + '.UPDATE_ERROR':\\n          {\\n            var _id7 = action.id,\\n                _error3 = action.error;\\n\\n\\n            if (isSingleModel) {\\n              return createNewModel({ id: _id7,\\n                attributes: state.attributes,\\n                metaData: { loadingError: _error3 }\\n              });\\n            }\\n\\n            return Object.assign({}, state, {\\n              models: setMemberLoadingError({ state: state, id: _id7, error: _error3 })\\n            });\\n          }\\n        case resource + '.DESTROY':\\n          {\\n            var _data5 = action.data || {};\\n            var _id8 = _data5.id || state.id;\\n\\n            if (isSingleModel) {\\n              return createNewModel({ id: _id8,\\n                attributes: state.attributes,\\n                metaData: { loading: true }\\n              });\\n            }\\n\\n            return Object.assign({}, state, {\\n              models: setMemberLoading({ idAttribute: idAttribute, id: _id8, state: state })\\n            });\\n          }\\n        case resource + '.DESTROY_SUCCESS':\\n          {\\n            var _id9 = action.id;\\n\\n\\n            if (isSingleModel) {\\n              return null;\\n            }\\n\\n            return Object.assign({}, state, {\\n              models: destroyMember({ idAttribute: idAttribute, id: _id9, state: state })\\n            });\\n          }\\n        case resource + '.DESTROY_ERROR':\\n          {\\n            var _id10 = action.id,\\n                _error4 = action.error;\\n\\n\\n            if (isSingleModel) {\\n              return Object.assign({}, state, {\\n                loading: false,\\n                loadingError: _error4\\n              });\\n            }\\n\\n            return Object.assign({}, state, {\\n              models: setMemberLoadingError({ state: state, id: _id10, idAttribute: idAttribute, error: _error4 })\\n            });\\n          }\\n        case resource + '.SET_LOADING':\\n          {\\n            // generally loading state is set in the base rails action,\\n            // but this is useful for resources being created on client\\n            var _id11 = action.id,\\n                _cId3 = action.cId;\\n\\n\\n            if (isSingleModel) {\\n              return Object.assign({}, state, {\\n                loading: true,\\n                loadingError: undefined\\n              });\\n            }\\n\\n            return Object.assign({}, state, {\\n              models: setMemberLoading({ idAttribute: idAttribute, id: _id11, cId: _cId3, state: state })\\n            });\\n          }\\n        case resource + '.SET_OPTIMISTIC_DATA':\\n          {\\n            var _ret = function () {\\n              var id = action.id,\\n                  cId = action.cId,\\n                  data = action.data;\\n\\n              var currentModel = isSingleModel ? state : findModel({ id: id, cId: cId, state: state });\\n              var __prevData = Object.assign({}, currentModel.attributes);\\n              var currentMeta = {};\\n              var newMeta = void 0;\\n\\n              Object.keys(apiDefaultState).forEach(function (metaKey) {\\n                currentMeta[metaKey] = currentModel[metaKey];\\n              });\\n\\n              newMeta = Object.assign({}, currentMeta, { __prevData: __prevData });\\n\\n              if (isSingleModel) {\\n                return {\\n                  v: createNewModel({ id: id, cId: cId,\\n                    attributes: Object.assign({}, currentModel.attributes, data),\\n                    metaData: newMeta\\n                  })\\n                };\\n              }\\n\\n              return {\\n                v: createNewCollection({\\n                  models: setMemberAttributes({ data: data, state: state, id: id, cId: cId, metaData: newMeta })\\n                })\\n              };\\n            }();\\n\\n            if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \\\"object\\\") return _ret.v;\\n          }\\n        case resource + '.UNSET_OPTIMISTIC_DATA':\\n          {\\n            var _id12 = action.id,\\n                _cId4 = action.cId;\\n\\n            var currentModel = isSingleModel ? state : findModel({ id: _id12, cId: _cId4, state: state });\\n\\n            if (isSingleModel) {\\n              return createNewModel({ id: _id12, cId: _cId4,\\n                attributes: currentModel.__prevData\\n              });\\n            }\\n\\n            return createNewCollection({\\n              models: setMemberAttributes({ data: currentModel.__prevData, state: state, id: _id12, cId: _cId4 })\\n            });\\n          }\\n        default:\\n          {\\n            var resourceConfig = config.resources[resource];\\n\\n            if (resourceConfig && resourceConfig.reducer) {\\n              // additional action handlers supplied through config\\n              return resourceConfig.reducer(state, action);\\n            }\\n\\n            return state;\\n          }\\n      }\\n    };\\n  });\\n\\n  return (0, _redux.combineReducers)(reducers);\\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 10 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _utilities = __webpack_require__(1);\\n\\nexports.default = function () {\\n  for (var _len = arguments.length, configs = Array(_len), _key = 0; _key < _len; _key++) {\\n    configs[_key] = arguments[_key];\\n  }\\n\\n  var defaultConfig = configs[0] || {}; // the first config is used as the default settings\\n  var finalConfig = Object.assign({}, defaultConfig, {\\n    resources: Object.assign({}, defaultConfig.resources)\\n  });\\n\\n  configs.map(function (config) {\\n    if (!config.resources) {\\n      return;\\n    }\\n    var newResources = {};\\n    Object.keys(config.resources || {}).forEach(function (resourceName) {\\n      var resource = config.resources[resourceName];\\n\\n      // mid-level  settings\\n      if (resourceName === 'baseUrl' && typeof resource === 'string') {\\n        return;\\n      }\\n      if (resourceName === 'optimisticUpdateEnabled' && (0, _utilities.isBool)(resource)) {\\n        return;\\n      }\\n\\n      // apply some settings to all resources in config without being specified\\n      // this is particularly useful for multi-config setups\\n      newResources[resourceName] = Object.assign({}, resource, {\\n        baseUrl: resource.baseUrl || config.resources.baseUrl || defaultConfig.baseUrl,\\n        optimisticUpdateEnabled: (0, _utilities.determinOptimisticUpdateSetting)({ resourceConfig: resource, config: config, defaultConfig: defaultConfig })\\n      });\\n    });\\n\\n    return newResources;\\n  }).filter(function (resource) {\\n    return typeof resource !== 'undefined';\\n  }).forEach(function (resourceMap) {\\n    Object.keys(resourceMap).forEach(function (resourceName) {\\n      var resource = resourceMap[resourceName];\\n\\n      finalConfig.resources[resourceName] = Object.assign({}, resource);\\n    });\\n  });\\n\\n  return finalConfig;\\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbWJpbmVDb25maWdzLmpzPzRhMGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGV0ZXJtaW5PcHRpbWlzdGljVXBkYXRlU2V0dGluZywgaXNCb29sIH0gZnJvbSAnLi91dGlsaXRpZXMnXG5cbmV4cG9ydCBkZWZhdWx0ICguLi5jb25maWdzKSA9PiB7XG4gIGNvbnN0IGRlZmF1bHRDb25maWcgPSBjb25maWdzWzBdIHx8IHt9IC8vIHRoZSBmaXJzdCBjb25maWcgaXMgdXNlZCBhcyB0aGUgZGVmYXVsdCBzZXR0aW5nc1xuICBsZXQgZmluYWxDb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0Q29uZmlnLCB7XG4gICAgcmVzb3VyY2VzOiBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0Q29uZmlnLnJlc291cmNlcylcbiAgfSlcblxuICBjb25maWdzXG4gICAgLm1hcCgoY29uZmlnKSA9PiB7XG4gICAgICBpZiAoIWNvbmZpZy5yZXNvdXJjZXMpIHsgcmV0dXJuIH1cbiAgICAgIGNvbnN0IG5ld1Jlc291cmNlcyA9IHt9XG4gICAgICBPYmplY3Qua2V5cyhjb25maWcucmVzb3VyY2VzIHx8IHt9KS5mb3JFYWNoKChyZXNvdXJjZU5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBjb25maWcucmVzb3VyY2VzW3Jlc291cmNlTmFtZV1cblxuICAgICAgICAvLyBtaWQtbGV2ZWwgIHNldHRpbmdzXG4gICAgICAgIGlmIChyZXNvdXJjZU5hbWUgPT09ICdiYXNlVXJsJyAmJiB0eXBlb2YgcmVzb3VyY2UgPT09ICdzdHJpbmcnKSB7IHJldHVybiB9XG4gICAgICAgIGlmIChyZXNvdXJjZU5hbWUgPT09ICdvcHRpbWlzdGljVXBkYXRlRW5hYmxlZCcgJiYgaXNCb29sKHJlc291cmNlKSkgeyByZXR1cm4gfVxuXG4gICAgICAgIC8vIGFwcGx5IHNvbWUgc2V0dGluZ3MgdG8gYWxsIHJlc291cmNlcyBpbiBjb25maWcgd2l0aG91dCBiZWluZyBzcGVjaWZpZWRcbiAgICAgICAgLy8gdGhpcyBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBtdWx0aS1jb25maWcgc2V0dXBzXG4gICAgICAgIG5ld1Jlc291cmNlc1tyZXNvdXJjZU5hbWVdID0gT2JqZWN0LmFzc2lnbih7fSwgcmVzb3VyY2UsIHtcbiAgICAgICAgICBiYXNlVXJsOiByZXNvdXJjZS5iYXNlVXJsIHx8IGNvbmZpZy5yZXNvdXJjZXMuYmFzZVVybCB8fCBkZWZhdWx0Q29uZmlnLmJhc2VVcmwsXG4gICAgICAgICAgb3B0aW1pc3RpY1VwZGF0ZUVuYWJsZWQ6IGRldGVybWluT3B0aW1pc3RpY1VwZGF0ZVNldHRpbmcoe3Jlc291cmNlQ29uZmlnOiByZXNvdXJjZSwgY29uZmlnLCBkZWZhdWx0Q29uZmlnfSlcbiAgICAgICAgfSlcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBuZXdSZXNvdXJjZXNcbiAgICB9KVxuICAgIC5maWx0ZXIocmVzb3VyY2UgPT4gdHlwZW9mIHJlc291cmNlICE9PSAndW5kZWZpbmVkJylcbiAgICAuZm9yRWFjaCgocmVzb3VyY2VNYXApID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKHJlc291cmNlTWFwKS5mb3JFYWNoKChyZXNvdXJjZU5hbWUpID0+IHtcbiAgICAgICAgbGV0IHJlc291cmNlID0gcmVzb3VyY2VNYXBbcmVzb3VyY2VOYW1lXVxuXG4gICAgICAgIGZpbmFsQ29uZmlnLnJlc291cmNlc1tyZXNvdXJjZU5hbWVdID0gT2JqZWN0LmFzc2lnbih7fSwgcmVzb3VyY2UpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgcmV0dXJuIGZpbmFsQ29uZmlnXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2NvbWJpbmVDb25maWdzLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 11 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\"return\\\"]) _i[\\\"return\\\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance\\\"); } }; }();\\n\\nvar _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\nvar _utilities = __webpack_require__(1);\\n\\nvar fetchQueue = {};\\n\\nvar actionMethodMap = {\\n  SHOW: 'GET',\\n  INDEX: 'GET',\\n  CREATE: 'POST',\\n  UPDATE: 'PUT',\\n  DESTROY: 'DELETE'\\n};\\n\\nvar constructBaseQueryParam = function constructBaseQueryParam(key, value) {\\n  return key + '=' + encodeURIComponent(value);\\n};\\n\\nvar constructArrayQueryParam = function constructArrayQueryParam(key, values) {\\n  return values.map(function (value) {\\n    return constructBaseQueryParam(key + '[]', value);\\n  });\\n};\\n\\nvar constructQueryParam = function constructQueryParam(key, value) {\\n  return Array.isArray(value) ? constructArrayQueryParam(key, value) : constructBaseQueryParam(key, value);\\n};\\n\\nvar constructQueryParams = function constructQueryParams() {\\n  var queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n  var railsAction = arguments[1];\\n\\n  var keys = Object.keys(queryParams);\\n  if (keys.length === 0 || actionMethodMap[railsAction] !== 'GET') return '';\\n\\n  var queryString = keys.map(function (key) {\\n    return constructQueryParam(key, queryParams[key]);\\n  }).join('&');\\n\\n  return '?' + queryString;\\n};\\n\\nvar constructUrl = function constructUrl(_ref) {\\n  var baseUrl = _ref.baseUrl,\\n      controller = _ref.controller,\\n      railsAction = _ref.railsAction,\\n      data = _ref.data,\\n      _ref$queryParams = _ref.queryParams,\\n      queryParams = _ref$queryParams === undefined ? {} : _ref$queryParams;\\n\\n  var resourceType = (0, _utilities.determineResourceType)({ controller: controller });\\n  var urlTail = function urlTail() {\\n    // all actions on a collection, other than index and create, require an id\\n    if (resourceType === 'collection' && railsAction !== 'INDEX' && railsAction !== 'CREATE') {\\n      return '/' + data.id;\\n    }\\n\\n    return '';\\n  };\\n\\n  var queryString = constructQueryParams(queryParams, railsAction);\\n\\n  return '' + baseUrl + controller + urlTail() + queryString;\\n};\\n\\nvar constructfetchOptions = function constructfetchOptions(_ref2) {\\n  var railsAction = _ref2.railsAction,\\n      resource = _ref2.resource,\\n      config = _ref2.config,\\n      data = _ref2.data,\\n      _ref2$fetchParams = _ref2.fetchParams,\\n      fetchParams = _ref2$fetchParams === undefined ? {} : _ref2$fetchParams;\\n\\n  // options available match request the fetch Request object:\\n  // https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\\n  var method = actionMethodMap[railsAction];\\n  var headers = new Headers(fetchParams.headers || {});\\n  var options = Object.assign({}, fetchParams, { method: method, headers: headers });\\n\\n  // assume the body is meant to be JSON. Fetch requires you to Stringify JSON\\n  if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && method !== 'GET') {\\n    options.body = JSON.stringify(data);\\n  }\\n\\n  return options;\\n};\\n\\nvar dequeueFetch = function dequeueFetch(_ref3) {\\n  var resource = _ref3.resource;\\n\\n  var resourceQueue = getResourceQueue({ resource: resource });\\n\\n  // take this fetch off the queue\\n  resourceQueue.shift();\\n\\n  if (resourceQueue.length > 0) {\\n    fetchResource(resourceQueue[0]);\\n  }\\n};\\n\\nvar dispatchFetchError = function dispatchFetchError(_ref4) {\\n  var store = _ref4.store,\\n      resource = _ref4.resource,\\n      railsAction = _ref4.railsAction,\\n      error = _ref4.error,\\n      id = _ref4.id,\\n      cId = _ref4.cId,\\n      optimisticUpdateEnabled = _ref4.optimisticUpdateEnabled;\\n\\n  var type = resource + '.' + railsAction + '_ERROR';\\n  store.dispatch({ type: type, error: error, id: id, cId: cId });\\n\\n  if (['CREATE', 'UPDATE'].includes(railsAction) && optimisticUpdateEnabled) {\\n    store.dispatch({ type: resource + '.UNSET_OPTIMISTIC_DATA', id: id, cId: cId });\\n  }\\n};\\n\\nvar dispatchFetchSuccess = function dispatchFetchSuccess(_ref5) {\\n  var store = _ref5.store,\\n      resource = _ref5.resource,\\n      railsAction = _ref5.railsAction,\\n      id = _ref5.id,\\n      cId = _ref5.cId,\\n      json = _ref5.json,\\n      config = _ref5.config,\\n      controller = _ref5.controller;\\n\\n  var type = resource + '.' + railsAction + '_SUCCESS';\\n  store.dispatch({ type: type, cId: cId, id: id,\\n    response: parseResult({ json: json, resource: resource, config: config,\\n      resourceType: (0, _utilities.determineResourceType)({ controller: controller })\\n    })\\n  });\\n};\\n\\nvar enqueueFetch = function enqueueFetch(resource, fetchData) {\\n  // adds fetch request to queue by resource\\n  // and intializes the queue if needed\\n  var resourceQueue = getResourceQueue({ resource: resource });\\n\\n  resourceQueue.push(fetchData);\\n\\n  if (resourceQueue.length <= 1) {\\n    // this is the only queued fetch, so start the queue\\n    fetchResource(fetchData);\\n  }\\n};\\n\\nvar fetchResource = function fetchResource(_ref6) {\\n  var store = _ref6.store,\\n      resource = _ref6.resource,\\n      config = _ref6.config,\\n      _ref6$data = _ref6.data,\\n      data = _ref6$data === undefined ? {} : _ref6$data,\\n      railsAction = _ref6.railsAction,\\n      controllerOverride = _ref6.controllerOverride,\\n      fetchParamsOverride = _ref6.fetchParamsOverride,\\n      queryParamsOverride = _ref6.queryParamsOverride;\\n\\n  var resourceConfig = config.resources[resource];\\n  var baseUrl = resourceConfig.baseUrl || config.baseUrl;\\n  var controller = controllerOverride || resourceConfig.controller;\\n  var idAttribute = (0, _utilities.getResourceIdAttribute)({ config: config, resource: resource });\\n  var fetchParams = fetchParamsOverride || resourceConfig.fetchParams || config.fetchParams;\\n  var queryParams = queryParamsOverride || resourceConfig.queryParams || config.queryParams;\\n  var options = constructfetchOptions({ railsAction: railsAction, resource: resource, data: data, config: config, fetchParams: fetchParams });\\n  var url = constructUrl({ baseUrl: baseUrl, controller: controller, railsAction: railsAction, data: data, fetchParams: fetchParams, queryParams: queryParams });\\n  var optimisticUpdateEnabled = (0, _utilities.determinOptimisticUpdateSetting)({ resourceConfig: resourceConfig, config: config });\\n  var cId = void 0;\\n\\n  // NOTE: assigning a cId for new models must happen before optimistic updates\\n  if (railsAction === 'CREATE') {\\n    cId = (0, _utilities.getUniqueClientId)();\\n    store.dispatch({ type: resource + '.ASSIGN_CID', cId: cId });\\n    store.dispatch({ type: resource + '.SET_LOADING', cId: cId });\\n  }\\n\\n  if (['CREATE', 'UPDATE'].includes(railsAction) && optimisticUpdateEnabled) {\\n    store.dispatch({ type: resource + '.SET_OPTIMISTIC_DATA', id: data.id, cId: cId, data: data });\\n  }\\n\\n  fetch(url, options).then(function (response) {\\n    response.json().then(function (json) {\\n      var id = json && json[idAttribute] || data.id;\\n\\n      if (!response.ok) {\\n        return dispatchFetchError({ store: store, resource: resource, railsAction: railsAction, id: id, cId: cId, optimisticUpdateEnabled: optimisticUpdateEnabled,\\n          error: json.error || { message: response.statusText }\\n        });\\n      }\\n\\n      dispatchFetchSuccess({ store: store, resource: resource, railsAction: railsAction, id: id, cId: cId, json: json, config: config, controller: controller, optimisticUpdateEnabled: optimisticUpdateEnabled });\\n    }).catch(function (error) {\\n      var outError = error && error.toString && error.toString();\\n      dispatchFetchError({ store: store, resource: resource, railsAction: railsAction, error: outError, id: data.id, cId: cId, optimisticUpdateEnabled: optimisticUpdateEnabled });\\n    });\\n  }).catch(function (error) {\\n    dispatchFetchError({ store: store, resource: resource, railsAction: railsAction, error: error, id: data.id, cId: cId, optimisticUpdateEnabled: optimisticUpdateEnabled });\\n  }).then(function () {\\n    return dequeueFetch({ resource: resource });\\n  });\\n};\\n\\nvar getResourceQueue = function getResourceQueue(_ref7) {\\n  var resource = _ref7.resource;\\n\\n  if (!fetchQueue[resource]) {\\n    fetchQueue[resource] = { queue: [] };\\n  }\\n\\n  return fetchQueue[resource].queue;\\n};\\n\\nvar parseResult = function parseResult(_ref8) {\\n  var json = _ref8.json,\\n      resource = _ref8.resource,\\n      config = _ref8.config,\\n      resourceType = _ref8.resourceType;\\n\\n  var resourceParse = config.resources[resource].parse;\\n\\n  // parse methods can be defined per resousrce type or\\n  // as a catchall for all resource types\\n  switch (typeof resourceParse === 'undefined' ? 'undefined' : _typeof(resourceParse)) {\\n    case 'object':\\n      {\\n        var parseMethod = resourceParse && resourceParse[resourceType];\\n        if (!parseMethod) {\\n          return json;\\n        }\\n\\n        return parseMethod(json);\\n      }\\n    case 'function':\\n      {\\n        return resourceParse(json);\\n      }\\n    default:\\n      {\\n        return json;\\n      }\\n  }\\n};\\n\\nexports.default = function (config) {\\n  return function (store) {\\n    return function (next) {\\n      return function (action) {\\n        var _action$type$split = action.type.split('.'),\\n            _action$type$split2 = _slicedToArray(_action$type$split, 2),\\n            resource = _action$type$split2[0],\\n            railsAction = _action$type$split2[1];\\n\\n        var data = action.data,\\n            controller = action.controller,\\n            fetchParams = action.fetchParams;\\n\\n        var _ref9 = data || {},\\n            queryParams = _ref9.queryParams;\\n\\n        var fetchData = {\\n          store: store,\\n          resource: resource,\\n          config: config,\\n          data: data,\\n          railsAction: railsAction,\\n          controllerOverride: controller,\\n          fetchParamsOverride: fetchParams,\\n          queryParamsOverride: queryParams\\n        };\\n        var resourceConfig = config.resources[resource];\\n\\n        if (resourceConfig && actionMethodMap[railsAction]) {\\n\\n          if (config.disableFetchQueueing || resourceConfig.disableFetchQueueing) {\\n            // Fetch queueing disabled, let the fetch run immediately\\n            fetchResource(fetchData);\\n          } else {\\n            enqueueFetch(resource, fetchData);\\n          }\\n        }\\n\\n        return next(action);\\n      };\\n    };\\n  };\\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 12 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.index = index;\\nexports.show = show;\\nexports.update = update;\\nexports.create = create;\\nexports.destroy = destroy;\\nfunction index(_ref) {\\n  var resource = _ref.resource,\\n      controller = _ref.controller,\\n      queryParams = _ref.queryParams;\\n\\n  return {\\n    type: resource + \\\".INDEX\\\",\\n    data: {\\n      queryParams: queryParams\\n    },\\n    controller: controller\\n  };\\n}\\n\\nfunction show(_ref2) {\\n  var id = _ref2.id,\\n      resource = _ref2.resource,\\n      controller = _ref2.controller,\\n      queryParams = _ref2.queryParams;\\n\\n  return {\\n    type: resource + \\\".SHOW\\\",\\n    data: { id: id, queryParams: queryParams },\\n    controller: controller\\n  };\\n}\\n\\nfunction update(_ref3) {\\n  var id = _ref3.id,\\n      attributes = _ref3.attributes,\\n      resource = _ref3.resource,\\n      controller = _ref3.controller;\\n\\n  return {\\n    type: resource + \\\".UPDATE\\\",\\n    data: Object.assign({}, { id: id }, attributes),\\n    controller: controller\\n  };\\n}\\n\\nfunction create(_ref4) {\\n  var resource = _ref4.resource,\\n      attributes = _ref4.attributes,\\n      controller = _ref4.controller;\\n\\n  return {\\n    type: resource + \\\".CREATE\\\",\\n    data: attributes,\\n    controller: controller\\n  };\\n}\\n\\nfunction destroy(_ref5) {\\n  var id = _ref5.id,\\n      resource = _ref5.resource,\\n      controller = _ref5.controller;\\n\\n  return {\\n    type: resource + \\\".DESTROY\\\",\\n    data: { id: id },\\n    controller: controller\\n  };\\n}\\n\\nexports.default = { index: index, show: show, update: update, create: create, destroy: destroy };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3JhaWxzQWN0aW9ucy5qcz8yNzMyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpbmRleCh7cmVzb3VyY2UsIGNvbnRyb2xsZXIsIHF1ZXJ5UGFyYW1zfSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IGAke3Jlc291cmNlfS5JTkRFWGAsXG4gICAgZGF0YToge1xuICAgICAgcXVlcnlQYXJhbXNcbiAgICB9LFxuICAgIGNvbnRyb2xsZXJcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvdyh7aWQsIHJlc291cmNlLCBjb250cm9sbGVyLCBxdWVyeVBhcmFtc30pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBgJHtyZXNvdXJjZX0uU0hPV2AsXG4gICAgZGF0YTogeyBpZCwgcXVlcnlQYXJhbXMgfSxcbiAgICBjb250cm9sbGVyXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZSh7aWQsIGF0dHJpYnV0ZXMsIHJlc291cmNlLCBjb250cm9sbGVyfSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IGAke3Jlc291cmNlfS5VUERBVEVgLFxuICAgIGRhdGE6IE9iamVjdC5hc3NpZ24oe30sIHsgaWQgfSwgYXR0cmlidXRlcyksXG4gICAgY29udHJvbGxlclxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoe3Jlc291cmNlLCBhdHRyaWJ1dGVzLCBjb250cm9sbGVyfSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IGAke3Jlc291cmNlfS5DUkVBVEVgLFxuICAgIGRhdGE6IGF0dHJpYnV0ZXMsXG4gICAgY29udHJvbGxlclxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95KHtpZCwgcmVzb3VyY2UsIGNvbnRyb2xsZXJ9KSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogYCR7cmVzb3VyY2V9LkRFU1RST1lgLFxuICAgIGRhdGE6IHsgaWQgfSxcbiAgICBjb250cm9sbGVyXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgeyBpbmRleCwgc2hvdywgdXBkYXRlLCBjcmVhdGUsIGRlc3Ryb3kgfVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9yYWlsc0FjdGlvbnMuanMiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFVQTtBQVFBO0FBUUE7QUFRQTtBQWxDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBTEE7QUFPQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 13 */\n\t\t/***/function (module, __webpack_exports__, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Symbol_js__ = __webpack_require__(2);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__getRawTag_js__ = __webpack_require__(16);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__objectToString_js__ = __webpack_require__(17);\\n\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar nullTag = '[object Null]',\\n    undefinedTag = '[object Undefined]';\\n\\n/** Built-in value references. */\\nvar symToStringTag = __WEBPACK_IMPORTED_MODULE_0__Symbol_js__[\\\"a\\\" /* default */] ? __WEBPACK_IMPORTED_MODULE_0__Symbol_js__[\\\"a\\\" /* default */].toStringTag : undefined;\\n\\n/**\\n * The base implementation of `getTag` without fallbacks for buggy environments.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {string} Returns the `toStringTag`.\\n */\\nfunction baseGetTag(value) {\\n  if (value == null) {\\n    return value === undefined ? undefinedTag : nullTag;\\n  }\\n  return (symToStringTag && symToStringTag in Object(value))\\n    ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__getRawTag_js__[\\\"a\\\" /* default */])(value)\\n    : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__objectToString_js__[\\\"a\\\" /* default */])(value);\\n}\\n\\n/* harmony default export */ __webpack_exports__[\\\"a\\\"] = baseGetTag;\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC1lcy9fYmFzZUdldFRhZy5qcz9kYmJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBnZXRSYXdUYWcgZnJvbSAnLi9fZ2V0UmF3VGFnLmpzJztcbmltcG9ydCBvYmplY3RUb1N0cmluZyBmcm9tICcuL19vYmplY3RUb1N0cmluZy5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlR2V0VGFnO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC1lcy9fYmFzZUdldFRhZy5qc1xuLy8gbW9kdWxlIGlkID0gMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 14 */\n\t\t/***/function (module, __webpack_exports__, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */\\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\\n\\n/* harmony default export */ __webpack_exports__[\\\"a\\\"] = freeGlobal;\\n\\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(8)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC1lcy9fZnJlZUdsb2JhbC5qcz8zMDUzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbmV4cG9ydCBkZWZhdWx0IGZyZWVHbG9iYWw7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoLWVzL19mcmVlR2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 15 */\n\t\t/***/function (module, __webpack_exports__, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__overArg_js__ = __webpack_require__(18);\\n\\n\\n/** Built-in value references. */\\nvar getPrototype = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__overArg_js__[\\\"a\\\" /* default */])(Object.getPrototypeOf, Object);\\n\\n/* harmony default export */ __webpack_exports__[\\\"a\\\"] = getPrototype;\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC1lcy9fZ2V0UHJvdG90eXBlLmpzPzc3MzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG92ZXJBcmcgZnJvbSAnLi9fb3ZlckFyZy5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5leHBvcnQgZGVmYXVsdCBnZXRQcm90b3R5cGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoLWVzL19nZXRQcm90b3R5cGUuanNcbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 16 */\n\t\t/***/function (module, __webpack_exports__, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Symbol_js__ = __webpack_require__(2);\\n\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\nvar nativeObjectToString = objectProto.toString;\\n\\n/** Built-in value references. */\\nvar symToStringTag = __WEBPACK_IMPORTED_MODULE_0__Symbol_js__[\\\"a\\\" /* default */] ? __WEBPACK_IMPORTED_MODULE_0__Symbol_js__[\\\"a\\\" /* default */].toStringTag : undefined;\\n\\n/**\\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {string} Returns the raw `toStringTag`.\\n */\\nfunction getRawTag(value) {\\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\\n      tag = value[symToStringTag];\\n\\n  try {\\n    value[symToStringTag] = undefined;\\n    var unmasked = true;\\n  } catch (e) {}\\n\\n  var result = nativeObjectToString.call(value);\\n  if (unmasked) {\\n    if (isOwn) {\\n      value[symToStringTag] = tag;\\n    } else {\\n      delete value[symToStringTag];\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ __webpack_exports__[\\\"a\\\"] = getRawTag;\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC1lcy9fZ2V0UmF3VGFnLmpzPzM3MmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFJhd1RhZztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9sb2Rhc2gtZXMvX2dldFJhd1RhZy5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 17 */\n\t\t/***/function (module, __webpack_exports__, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\nvar nativeObjectToString = objectProto.toString;\\n\\n/**\\n * Converts `value` to a string using `Object.prototype.toString`.\\n *\\n * @private\\n * @param {*} value The value to convert.\\n * @returns {string} Returns the converted string.\\n */\\nfunction objectToString(value) {\\n  return nativeObjectToString.call(value);\\n}\\n\\n/* harmony default export */ __webpack_exports__[\\\"a\\\"] = objectToString;\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanM/ODkyZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0VG9TdHJpbmc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoLWVzL19vYmplY3RUb1N0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 18 */\n\t\t/***/function (module, __webpack_exports__, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/**\\n * Creates a unary function that invokes `func` with its argument transformed.\\n *\\n * @private\\n * @param {Function} func The function to wrap.\\n * @param {Function} transform The argument transform.\\n * @returns {Function} Returns the new function.\\n */\\nfunction overArg(func, transform) {\\n  return function(arg) {\\n    return func(transform(arg));\\n  };\\n}\\n\\n/* harmony default export */ __webpack_exports__[\\\"a\\\"] = overArg;\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC1lcy9fb3ZlckFyZy5qcz8wYTYwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBvdmVyQXJnO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC1lcy9fb3ZlckFyZy5qc1xuLy8gbW9kdWxlIGlkID0gMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 19 */\n\t\t/***/function (module, __webpack_exports__, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__freeGlobal_js__ = __webpack_require__(14);\\n\\n\\n/** Detect free variable `self`. */\\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\\n\\n/** Used as a reference to the global object. */\\nvar root = __WEBPACK_IMPORTED_MODULE_0__freeGlobal_js__[\\\"a\\\" /* default */] || freeSelf || Function('return this')();\\n\\n/* harmony default export */ __webpack_exports__[\\\"a\\\"] = root;\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC1lcy9fcm9vdC5qcz8wMmZmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3Q7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoLWVzL19yb290LmpzXG4vLyBtb2R1bGUgaWQgPSAxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 20 */\n\t\t/***/function (module, __webpack_exports__, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/**\\n * Checks if `value` is object-like. A value is object-like if it's not `null`\\n * and has a `typeof` result of \\\"object\\\".\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\\n * @example\\n *\\n * _.isObjectLike({});\\n * // => true\\n *\\n * _.isObjectLike([1, 2, 3]);\\n * // => true\\n *\\n * _.isObjectLike(_.noop);\\n * // => false\\n *\\n * _.isObjectLike(null);\\n * // => false\\n */\\nfunction isObjectLike(value) {\\n  return value != null && typeof value == 'object';\\n}\\n\\n/* harmony default export */ __webpack_exports__[\\\"a\\\"] = isObjectLike;\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC1lcy9pc09iamVjdExpa2UuanM/NGFlYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3RMaWtlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC1lcy9pc09iamVjdExpa2UuanNcbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 21 */\n\t\t/***/function (module, __webpack_exports__, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__compose__ = __webpack_require__(5);\\n/* harmony export (immutable) */ __webpack_exports__[\\\"a\\\"] = applyMiddleware;\\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\\n\\n\\n\\n/**\\n * Creates a store enhancer that applies middleware to the dispatch method\\n * of the Redux store. This is handy for a variety of tasks, such as expressing\\n * asynchronous actions in a concise manner, or logging every action payload.\\n *\\n * See `redux-thunk` package as an example of the Redux middleware.\\n *\\n * Because middleware is potentially asynchronous, this should be the first\\n * store enhancer in the composition chain.\\n *\\n * Note that each middleware will be given the `dispatch` and `getState` functions\\n * as named arguments.\\n *\\n * @param {...Function} middlewares The middleware chain to be applied.\\n * @returns {Function} A store enhancer applying the middleware.\\n */\\nfunction applyMiddleware() {\\n  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {\\n    middlewares[_key] = arguments[_key];\\n  }\\n\\n  return function (createStore) {\\n    return function (reducer, preloadedState, enhancer) {\\n      var store = createStore(reducer, preloadedState, enhancer);\\n      var _dispatch = store.dispatch;\\n      var chain = [];\\n\\n      var middlewareAPI = {\\n        getState: store.getState,\\n        dispatch: function dispatch(action) {\\n          return _dispatch(action);\\n        }\\n      };\\n      chain = middlewares.map(function (middleware) {\\n        return middleware(middlewareAPI);\\n      });\\n      _dispatch = __WEBPACK_IMPORTED_MODULE_0__compose__[\\\"a\\\" /* default */].apply(undefined, chain)(store.dispatch);\\n\\n      return _extends({}, store, {\\n        dispatch: _dispatch\\n      });\\n    };\\n  };\\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlZHV4L2VzL2FwcGx5TWlkZGxld2FyZS5qcz83MDFjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpO1xuICAgICAgdmFyIF9kaXNwYXRjaCA9IHN0b3JlLmRpc3BhdGNoO1xuICAgICAgdmFyIGNoYWluID0gW107XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoKGFjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh1bmRlZmluZWQsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG5cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVkdXgvZXMvYXBwbHlNaWRkbGV3YXJlLmpzXG4vLyBtb2R1bGUgaWQgPSAyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 22 */\n\t\t/***/function (module, __webpack_exports__, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/* harmony export (immutable) */ __webpack_exports__[\\\"a\\\"] = bindActionCreators;\\nfunction bindActionCreator(actionCreator, dispatch) {\\n  return function () {\\n    return dispatch(actionCreator.apply(undefined, arguments));\\n  };\\n}\\n\\n/**\\n * Turns an object whose values are action creators, into an object with the\\n * same keys, but with every function wrapped into a `dispatch` call so they\\n * may be invoked directly. This is just a convenience method, as you can call\\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\\n *\\n * For convenience, you can also pass a single function as the first argument,\\n * and get a function in return.\\n *\\n * @param {Function|Object} actionCreators An object whose values are action\\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\\n * syntax. You may also pass a single function.\\n *\\n * @param {Function} dispatch The `dispatch` function available on your Redux\\n * store.\\n *\\n * @returns {Function|Object} The object mimicking the original object, but with\\n * every action creator wrapped into the `dispatch` call. If you passed a\\n * function as `actionCreators`, the return value will also be a single\\n * function.\\n */\\nfunction bindActionCreators(actionCreators, dispatch) {\\n  if (typeof actionCreators === 'function') {\\n    return bindActionCreator(actionCreators, dispatch);\\n  }\\n\\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\\n    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?');\\n  }\\n\\n  var keys = Object.keys(actionCreators);\\n  var boundActionCreators = {};\\n  for (var i = 0; i < keys.length; i++) {\\n    var key = keys[i];\\n    var actionCreator = actionCreators[key];\\n    if (typeof actionCreator === 'function') {\\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\\n    }\\n  }\\n  return boundActionCreators;\\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlZHV4L2VzL2JpbmRBY3Rpb25DcmVhdG9ycy5qcz8zZDRhIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCAnICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArICcuICcgKyAnRGlkIHlvdSB3cml0ZSBcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXCIgaW5zdGVhZCBvZiBcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cIj8nKTtcbiAgfVxuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWN0aW9uQ3JlYXRvcnMpO1xuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWR1eC9lcy9iaW5kQWN0aW9uQ3JlYXRvcnMuanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 23 */\n\t\t/***/function (module, __webpack_exports__, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/* WEBPACK VAR INJECTION */(function(process) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__createStore__ = __webpack_require__(6);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_es_isPlainObject__ = __webpack_require__(3);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_warning__ = __webpack_require__(7);\\n/* harmony export (immutable) */ __webpack_exports__[\\\"a\\\"] = combineReducers;\\n\\n\\n\\n\\nfunction getUndefinedStateErrorMessage(key, action) {\\n  var actionType = action && action.type;\\n  var actionName = actionType && '\\\"' + actionType.toString() + '\\\"' || 'an action';\\n\\n  return 'Given action ' + actionName + ', reducer \\\"' + key + '\\\" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state.';\\n}\\n\\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\\n  var reducerKeys = Object.keys(reducers);\\n  var argumentName = action && action.type === __WEBPACK_IMPORTED_MODULE_0__createStore__[\\\"b\\\" /* ActionTypes */].INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\\n\\n  if (reducerKeys.length === 0) {\\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\\n  }\\n\\n  if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_lodash_es_isPlainObject__[\\\"a\\\" /* default */])(inputState)) {\\n    return 'The ' + argumentName + ' has unexpected type of \\\"' + {}.toString.call(inputState).match(/\\\\s([a-z|A-Z]+)/)[1] + '\\\". Expected argument to be an object with the following ' + ('keys: \\\"' + reducerKeys.join('\\\", \\\"') + '\\\"');\\n  }\\n\\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\\n  });\\n\\n  unexpectedKeys.forEach(function (key) {\\n    unexpectedKeyCache[key] = true;\\n  });\\n\\n  if (unexpectedKeys.length > 0) {\\n    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('\\\"' + unexpectedKeys.join('\\\", \\\"') + '\\\" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('\\\"' + reducerKeys.join('\\\", \\\"') + '\\\". Unexpected keys will be ignored.');\\n  }\\n}\\n\\nfunction assertReducerSanity(reducers) {\\n  Object.keys(reducers).forEach(function (key) {\\n    var reducer = reducers[key];\\n    var initialState = reducer(undefined, { type: __WEBPACK_IMPORTED_MODULE_0__createStore__[\\\"b\\\" /* ActionTypes */].INIT });\\n\\n    if (typeof initialState === 'undefined') {\\n      throw new Error('Reducer \\\"' + key + '\\\" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');\\n    }\\n\\n    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');\\n    if (typeof reducer(undefined, { type: type }) === 'undefined') {\\n      throw new Error('Reducer \\\"' + key + '\\\" returned undefined when probed with a random type. ' + ('Don\\\\'t try to handle ' + __WEBPACK_IMPORTED_MODULE_0__createStore__[\\\"b\\\" /* ActionTypes */].INIT + ' or other actions in \\\"redux/*\\\" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');\\n    }\\n  });\\n}\\n\\n/**\\n * Turns an object whose values are different reducer functions, into a single\\n * reducer function. It will call every child reducer, and gather their results\\n * into a single state object, whose keys correspond to the keys of the passed\\n * reducer functions.\\n *\\n * @param {Object} reducers An object whose values correspond to different\\n * reducer functions that need to be combined into one. One handy way to obtain\\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\\n * undefined for any action. Instead, they should return their initial state\\n * if the state passed to them was undefined, and the current state for any\\n * unrecognized action.\\n *\\n * @returns {Function} A reducer function that invokes every reducer inside the\\n * passed object, and builds a state object with the same shape.\\n */\\nfunction combineReducers(reducers) {\\n  var reducerKeys = Object.keys(reducers);\\n  var finalReducers = {};\\n  for (var i = 0; i < reducerKeys.length; i++) {\\n    var key = reducerKeys[i];\\n\\n    if (process.env.NODE_ENV !== 'production') {\\n      if (typeof reducers[key] === 'undefined') {\\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_warning__[\\\"a\\\" /* default */])('No reducer provided for key \\\"' + key + '\\\"');\\n      }\\n    }\\n\\n    if (typeof reducers[key] === 'function') {\\n      finalReducers[key] = reducers[key];\\n    }\\n  }\\n  var finalReducerKeys = Object.keys(finalReducers);\\n\\n  if (process.env.NODE_ENV !== 'production') {\\n    var unexpectedKeyCache = {};\\n  }\\n\\n  var sanityError;\\n  try {\\n    assertReducerSanity(finalReducers);\\n  } catch (e) {\\n    sanityError = e;\\n  }\\n\\n  return function combination() {\\n    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\\n    var action = arguments[1];\\n\\n    if (sanityError) {\\n      throw sanityError;\\n    }\\n\\n    if (process.env.NODE_ENV !== 'production') {\\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\\n      if (warningMessage) {\\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_warning__[\\\"a\\\" /* default */])(warningMessage);\\n      }\\n    }\\n\\n    var hasChanged = false;\\n    var nextState = {};\\n    for (var i = 0; i < finalReducerKeys.length; i++) {\\n      var key = finalReducerKeys[i];\\n      var reducer = finalReducers[key];\\n      var previousStateForKey = state[key];\\n      var nextStateForKey = reducer(previousStateForKey, action);\\n      if (typeof nextStateForKey === 'undefined') {\\n        var errorMessage = getUndefinedStateErrorMessage(key, action);\\n        throw new Error(errorMessage);\\n      }\\n      nextState[key] = nextStateForKey;\\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\\n    }\\n    return hasChanged ? nextState : state;\\n  };\\n}\\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(4)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 24 */\n\t\t/***/function (module, __webpack_exports__, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/* WEBPACK VAR INJECTION */(function(process) {Object.defineProperty(__webpack_exports__, \\\"__esModule\\\", { value: true });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__createStore__ = __webpack_require__(6);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__combineReducers__ = __webpack_require__(23);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__bindActionCreators__ = __webpack_require__(22);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__applyMiddleware__ = __webpack_require__(21);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__compose__ = __webpack_require__(5);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_warning__ = __webpack_require__(7);\\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \\\"createStore\\\", function() { return __WEBPACK_IMPORTED_MODULE_0__createStore__[\\\"a\\\"]; });\\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \\\"combineReducers\\\", function() { return __WEBPACK_IMPORTED_MODULE_1__combineReducers__[\\\"a\\\"]; });\\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \\\"bindActionCreators\\\", function() { return __WEBPACK_IMPORTED_MODULE_2__bindActionCreators__[\\\"a\\\"]; });\\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \\\"applyMiddleware\\\", function() { return __WEBPACK_IMPORTED_MODULE_3__applyMiddleware__[\\\"a\\\"]; });\\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \\\"compose\\\", function() { return __WEBPACK_IMPORTED_MODULE_4__compose__[\\\"a\\\"]; });\\n\\n\\n\\n\\n\\n\\n\\n/*\\n* This is a dummy function to check if the function name has been altered by minification.\\n* If the function has been minified and NODE_ENV !== 'production', warn the user.\\n*/\\nfunction isCrushed() {}\\n\\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\\n  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_warning__[\\\"a\\\" /* default */])('You are currently using minified code outside of NODE_ENV === \\\\'production\\\\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');\\n}\\n\\n\\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(4)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlZHV4L2VzL2luZGV4LmpzPzA3ODQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZVN0b3JlIGZyb20gJy4vY3JlYXRlU3RvcmUnO1xuaW1wb3J0IGNvbWJpbmVSZWR1Y2VycyBmcm9tICcuL2NvbWJpbmVSZWR1Y2Vycyc7XG5pbXBvcnQgYmluZEFjdGlvbkNyZWF0b3JzIGZyb20gJy4vYmluZEFjdGlvbkNyZWF0b3JzJztcbmltcG9ydCBhcHBseU1pZGRsZXdhcmUgZnJvbSAnLi9hcHBseU1pZGRsZXdhcmUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJy4vdXRpbHMvd2FybmluZyc7XG5cbi8qXG4qIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuKi9cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXFwncHJvZHVjdGlvblxcJy4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIERlZmluZVBsdWdpbiBmb3Igd2VicGFjayAoaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMDAzMDAzMSkgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVTdG9yZSwgY29tYmluZVJlZHVjZXJzLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWR1eC9lcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 25 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\teval(\"module.exports = __webpack_require__(26);\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3N5bWJvbC1vYnNlcnZhYmxlL2luZGV4LmpzPzY5ODIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9pbmRleCcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3N5bWJvbC1vYnNlcnZhYmxlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 26 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"/* WEBPACK VAR INJECTION */(function(global, module) {\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _ponyfill = __webpack_require__(27);\\n\\nvar _ponyfill2 = _interopRequireDefault(_ponyfill);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\\n\\nvar root; /* global window */\\n\\n\\nif (typeof self !== 'undefined') {\\n  root = self;\\n} else if (typeof window !== 'undefined') {\\n  root = window;\\n} else if (typeof global !== 'undefined') {\\n  root = global;\\n} else if (true) {\\n  root = module;\\n} else {\\n  root = Function('return this')();\\n}\\n\\nvar result = (0, _ponyfill2['default'])(root);\\nexports['default'] = result;\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(28)(module)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3N5bWJvbC1vYnNlcnZhYmxlL2xpYi9pbmRleC5qcz82MzFmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9wb255ZmlsbCA9IHJlcXVpcmUoJy4vcG9ueWZpbGwnKTtcblxudmFyIF9wb255ZmlsbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb255ZmlsbCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIHJvb3Q7IC8qIGdsb2JhbCB3aW5kb3cgKi9cblxuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSAoMCwgX3BvbnlmaWxsMlsnZGVmYXVsdCddKShyb290KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHJlc3VsdDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc3ltYm9sLW9ic2VydmFibGUvbGliL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 27 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n\\tvalue: true\\n});\\nexports['default'] = symbolObservablePonyfill;\\nfunction symbolObservablePonyfill(root) {\\n\\tvar result;\\n\\tvar _Symbol = root.Symbol;\\n\\n\\tif (typeof _Symbol === 'function') {\\n\\t\\tif (_Symbol.observable) {\\n\\t\\t\\tresult = _Symbol.observable;\\n\\t\\t} else {\\n\\t\\t\\tresult = _Symbol('observable');\\n\\t\\t\\t_Symbol.observable = result;\\n\\t\\t}\\n\\t} else {\\n\\t\\tresult = '@@observable';\\n\\t}\\n\\n\\treturn result;\\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3N5bWJvbC1vYnNlcnZhYmxlL2xpYi9wb255ZmlsbC5qcz81MDVkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHN5bWJvbE9ic2VydmFibGVQb255ZmlsbDtcbmZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBfU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBfU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKF9TeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gX1N5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBfU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRfU3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3N5bWJvbC1vYnNlcnZhYmxlL2xpYi9wb255ZmlsbC5qc1xuLy8gbW9kdWxlIGlkID0gMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 28 */\n\t\t/***/function (module, exports) {\n\n\t\t\teval(\"module.exports = function(module) {\\r\\n\\tif(!module.webpackPolyfill) {\\r\\n\\t\\tmodule.deprecate = function() {};\\r\\n\\t\\tmodule.paths = [];\\r\\n\\t\\t// module.parent = undefined by default\\r\\n\\t\\tif(!module.children) module.children = [];\\r\\n\\t\\tObject.defineProperty(module, \\\"loaded\\\", {\\r\\n\\t\\t\\tenumerable: true,\\r\\n\\t\\t\\tget: function() {\\r\\n\\t\\t\\t\\treturn module.l;\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\t\\tObject.defineProperty(module, \\\"id\\\", {\\r\\n\\t\\t\\tenumerable: true,\\r\\n\\t\\t\\tget: function() {\\r\\n\\t\\t\\t\\treturn module.i;\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\t\\tmodule.webpackPolyfill = 1;\\r\\n\\t}\\r\\n\\treturn module;\\r\\n};\\r\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcclxuXHRpZighbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XHJcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcclxuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0aWYoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcclxuXHR9XHJcblx0cmV0dXJuIG1vZHVsZTtcclxufTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzXG4vLyBtb2R1bGUgaWQgPSAyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 29 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t__webpack_require__(0);\n\t\t\tmodule.exports = __webpack_require__(0);\n\n\t\t\t/***/\n\t\t}]\n\t\t/******/)\n\t);\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanM/YzNjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _propTypes = __webpack_require__(8);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar baseProps = {\n  loading: _propTypes2.default.bool.isRequired,\n  loadingError: _propTypes2.default.bool\n};\n\nvar member = _extends({}, baseProps, {\n  id: _propTypes2.default.number,\n  attributes: _propTypes2.default.object\n});\n\nvar collection = _extends({}, baseProps, {\n  models: _propTypes2.default.arrayOf(memberProps)\n});\n\nexports.default = {\n  member: member,\n  collection: collection\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvcmVzb3VyY2VQcm9wcy5qcz8wZDMyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuY29uc3QgYmFzZVByb3BzID0ge1xuICBsb2FkaW5nOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICBsb2FkaW5nRXJyb3I6IFByb3BUeXBlcy5ib29sXG59XG5cbmNvbnN0IG1lbWJlciA9IHtcbiAgLi4uYmFzZVByb3BzLFxuICBpZDogUHJvcFR5cGVzLm51bWJlcixcbiAgYXR0cmlidXRlczogUHJvcFR5cGVzLm9iamVjdFxufVxuXG5jb25zdCBjb2xsZWN0aW9uID0ge1xuICAuLi5iYXNlUHJvcHMsXG4gIG1vZGVsczogUHJvcFR5cGVzLmFycmF5T2YobWVtYmVyUHJvcHMpXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbWVtYmVyLFxuICBjb2xsZWN0aW9uXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL3Jlc291cmNlUHJvcHMuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFFQTtBQUNBO0FBSEE7QUFDQTtBQUtBO0FBRUE7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBRkEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_8__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcInByb3AtdHlwZXNcIj9iNjVhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV84X187XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCJcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ })
/******/ ]);
});